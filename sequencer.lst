                      ; Basic sequencer program
                      ; Can be jumped into at entry address
                      ; Expects stack to be set up
                      
                      ; =========================
                      ; Monitor Function Addresses
                      ; =========================
F804                  inch    equ $F804
F806                  inche   equ $F806
F808                  inchek  equ $F808
F80A                  outch   equ $F80A
F80C                  pdata   equ $F80C
F80E                  pcrlf   equ $F80E
                      
                      ; =========================
                      ; Sequencer Addresses
                      ; =========================
E020                  seq_io_base equ $E020
                      
4000                  seq_data_base equ $4000         ; The base of channel data (4 0x10-length byte arrays for each channel)
4040                  seq_tempo equ $4040             ; The tempo value
4042                  seq_record equ $4042            ; The address in the data of the track being recorded
4044                  seq_temp_tempo equ $4044        ; The temporary tempo storing the values as a tempo is being entered
4046                  seq_record_ch equ $4046         ; The channel to record sequences to
                                                      ; Note: this variable can take on special values to control the flow of the main playback logic
                                                      ; 0: Not recording, and doing standard playback
                                                      ; 0xFF: Playback stopped, should return to main menu
                                                      ; 0xFE: Playback paused, pending channel input from user to specify which channel to record to
4047                  seq_cur_beat equ $4047          ; The current beat being played
4048                  seq_num_spaces equ $4048        ; The number of spaces to print between markings, allows printing extra info in ISR without breaking spacing
4049                  seq_in_delay equ $4049          ; If the sequence is currently in the delay loop, if not the isr should not do anything (can sometimes miss keypresses, but the alternative is a race condition)
4050                  seq_timer_fired equ $4050
                      
                      
                      ; =========================
                      ; Serial Addresses/Config
                      ; =========================
E004                  serial_io_address equ $E004
0011                  serial_base_config equ $11
DFC6                  firq_jump_address equ $dfc6
E008                  timer_io_address equ $E008
                      
                      ; =========================
                      ; Entry
                      ; =========================
E800                          org $E800
                      
                              ;fcb 0x10
                              ;fcb 0x4a
                      
                              ; Print banner
E800  AD9FF80E                jsr [pcrlf]
                      
E804  861E                    lda #30
E806  BDEBDF                  jsr printspaces
E809  8EECED                  ldx #banner
E80C  AD9FF80C                jsr [pdata]
                      
                              ; Print Controls
E810  860D                    lda #13
E812  BDEBDF                  jsr printspaces
E815  8EED05                  ldx #controls
E818  AD9FF80C                jsr [pdata]
E81C  AD9FF80E                jsr [pcrlf]
E820  8616                    lda #22
E822  BDEBDF                  jsr printspaces
E825  8EED3C                  ldx #controls2
E828  AD9FF80C                jsr [pdata]
                      
                              ; Set default tempo
E82C  CC0014                  ldd #20
E82F  FD4040                  std seq_tempo
                      
E832  BDEB02          redraw  jsr drawscreen
E835  AD9FF808        poll    jsr [inchek]
E839  26FA                    bne poll
                      
E83B  AD9FF804                jsr [inch]
E83F  8166                    cmpa #'f'
E841  2738                    beq crashme
E843  8170                    cmpa #'p'
E845  2716                    beq do_playback
E847  8172                    cmpa #'r'
E849  2717                    beq do_record
E84B  8174                    cmpa #'t'
E84D  2718                    beq do_tempo
E84F  8163                    cmpa #'c'
E851  2719                    beq do_clear
E853  8164                    cmpa #'d'
E855  271A                    beq do_realtime_playback
E857  816D                    cmpa #'m'
E859  271B                    beq do_manual_entry
                      
E85B  20D8                    bra poll
E85D                  do_playback
E85D  BDEA49                  jsr playback
E860  20D0                    bra redraw
E862                  do_record
E862  BDEA08                  jsr record
E865  20CB                    bra redraw
E867                  do_tempo
E867  BDE986                  jsr tempo
E86A  20C6                    bra redraw
E86C                  do_clear
E86C  BDE9D6                  jsr clear
E86F  20C1                    bra redraw
E871                  do_realtime_playback
E871  BDE929                  jsr realtime_playback
E874  20BC                    bra redraw
E876                  do_manual_entry
E876  BDE88D                  jsr manual_entry
E879  20B7                    bra redraw
E87B                  crashme
E87B  8EE884                  ldx #cm_msg
E87E  AD9FF80C                jsr [pdata]
E882                  crashmenow
E882  10                      fcb $10
E883  45                      fcb $45
E884  4D616E4372617368 cm_msg  fcc "ManCrash"
E88C  04                      fcb $4
                      
                      ; =========================
                      ; Manual Entry subroutine
                      ; =========================
E88D                  manual_entry
                              ; Prompt for channel
E88D  8EED75                  ldx #channel_prompt_msg
E890  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
E894  AD9FF808        me_wfch jsr [inchek]
E898  27FA                    beq me_wfch
E89A  AD9FF804                jsr [inch]
E89E  8173                    cmpa #'s'
E8A0  277D                    beq me_done
E8A2  8131                    cmpa #'1'
E8A4  2DEE                    blt me_wfch
E8A6  8134                    cmpa #'4'
E8A8  2EEA                    bgt me_wfch
                              
                              ; Echo channel select
E8AA  1F89                    tfr a,b
E8AC  AD9FF80A                jsr [outch]
                      
                              ; Store channel
E8B0  C030                    subb #48
E8B2  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address (stored in x)
E8B5  5A                      decb
E8B6  8610                    lda #0x10
E8B8  3D                      mul
E8B9  8E4000                  ldx #seq_data_base
E8BC  3A                      abx
                      
E8BD  3410                    pshs x
                              ; Print manual message
E8BF  8EED6F                  ldx #manual_msg
E8C2  AD9FF80C                jsr [pdata]
E8C6  8605                    lda #5
E8C8  BDEBDF                  jsr printspaces
E8CB  3510                    puls x
                      
E8CD  867C                    lda #'|'
E8CF  AD9FF80A                jsr [outch]
                      
E8D3  4F                      clra
E8D4  3402            me_loop pshs a
E8D6  AD9FF808                jsr [inchek]
E8DA  26F8                    bne me_loop
E8DC  AD9FF804                jsr [inch]
                      
                              ; Check for stop
E8E0  8173                    cmpa #'s'
E8E2  273B                    beq me_done
                      
                              ; Do input processing
E8E4  F64046                  ldb seq_record_ch
E8E7  BDEC32                  jsr get_beat
E8EA  26E8                    bne me_loop
                      
                              ; Play Beat
E8EC  3502                    puls a
E8EE  3402                    pshs a
E8F0  BDEC13                  jsr play_beat
                      
                              ; ===Print tick===
E8F3  8602                    lda #2
E8F5  BDEBDF                  jsr printspaces
                              
E8F8  E680                    ldb ,x+
E8FA  8601                    lda #1
E8FC                  me_check_bit
E8FC  C501                    bitb #1
E8FE  2608                    bne me_print_val
E900  54                      lsrb
E901  4C                      inca
E902  8109                    cmpa #9
E904  26F6                    bne me_check_bit
E906  86FE                    lda #-2  ; When 48 is added it will turn into a dot
E908                  me_print_val
E908  8B30                    adda #48
E90A  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
E90E  3502                    puls a
E910  4C                      inca
E911  8110                    cmpa #16
E913  2DBF                    blt me_loop
                      
                              ; If at end of line, print line terminator and quit
E915  867C                    lda #'|'
E917  AD9FF80A                jsr [outch]
E91B  AD9FF80E                jsr [pcrlf]
                      
E91F                  me_done ; Stop any notes being played
E91F  8EE020                  ldx #seq_io_base
E922  4F                      clra
E923  5F                      clrb
E924  ED84                    std ,x
E926  ED02                    std 2,x
                      
E928  39                      rts
                      
                      
                      ; =========================
                      ; Realtime Playback subroutine
                      ; =========================
E929                  realtime_playback
                              ; Clear any pending played notes (when called internally)
E929  8EE020                  ldx #seq_io_base
E92C  4F                      clra
E92D  5F                      clrb
E92E  ED84                    std ,x
E930  ED02                    std 2,x
                      
E932  8EEDCD                  ldx #realtime_ch_prompt_msg
E935  AD9FF80C                jsr [pdata]
                      
E939  AD9FF808        rp_wfch jsr [inchek]
E93D  27FA                    beq rp_wfch
E93F  AD9FF804                jsr [inch]
E943  8131                    cmpa #'1'
E945  2D35                    blt rp_done
E947  8134                    cmpa #'4'
E949  2E31                    bgt rp_done
                      
                              ; Echo selected channel to console, and give prompt to play data
E94B  3402                    pshs a
E94D  AD9FF80A                jsr [outch]
E951  8EEDF6                  ldx #realtime_entry_msg
E954  AD9FF80C                jsr [pdata]
E958  3504                    puls b
                      
                              ; Load the address to write channel data to
E95A  C030                    subb #48
E95C  F74046                  stb seq_record_ch
E95F  5A                      decb
E960  8EE020                  ldx #seq_io_base
E963  3A                      abx
                      
                              ; Get input from user
E964  AD9FF808        rp_play jsr [inchek]
E968  27FA                    beq rp_play
E96A  AD9FF804                jsr [inch]
E96E  8163                    cmpa #'c'
E970  27B7                    beq realtime_playback
                      
                              ; Do processing on input data
E972  F64046                  ldb seq_record_ch
E975  BDEC32                  jsr get_beat
E978  2602                    bne rp_done
                              
E97A  20E8                    bra rp_play
                      
E97C                  rp_done ; Stop any pending playback
E97C  8EE020                  ldx #seq_io_base
E97F  4F                      clra
E980  5F                      clrb
E981  ED84                    std ,x
E983  ED02                    std 2,x
                      
E985  39                      rts
                      
                      ; =========================
                      ; Tempo subroutine
                      ; =========================
E986                  tempo
E986  8EED7A                  ldx #tempo_prompt_msg
E989  AD9FF80C                jsr [pdata]
                      
                              ; Clear temporary tempo
E98D  CC0000                  ldd #0
E990  FD4044                  std seq_temp_tempo
                      
E993  AD9FF808        t_waitc jsr [inchek]
E997  27FA                    beq t_waitc
E999  AD9FF806                jsr [inche]
E99D  812E                    cmpa #'.'
E99F  2723                    beq t_write
E9A1  8130                    cmpa #'0'
E9A3  2D2C                    blt t_done
E9A5  8139                    cmpa #'9'
E9A7  2E28                    bgt t_done
                      
                              ; Convert char to number
E9A9  8030                    suba #48
E9AB  3402                    pshs a
                      
                              ; Multiply existing temporary tempo by 10 and add entered number
E9AD  108E4044                ldy #seq_temp_tempo
E9B1  E621                    ldb 1,y
E9B3  860A                    lda #10
E9B5  3D                      mul
E9B6  1F01                    tfr d,x
E9B8  3504                    puls b
E9BA  3A                      abx
E9BB  AFA4                    stx ,y
                      
                              ; If the number is too big to fit into b before multiplication, write it (gives range of 2559)
E9BD  8C00FF                  cmpx #255
E9C0  2E02                    bgt t_write
                      
E9C2  20CF                    bra t_waitc
E9C4  FC4044          t_write ldd seq_temp_tempo
E9C7  FD4040                  std seq_tempo
                      
E9CA  8EEE36                  ldx #tempo_set_msg
E9CD  AD9FF80C                jsr [pdata]
E9D1  AD9FF80E        t_done  jsr [pcrlf]
E9D5  39                      rts
                      
                      ; =========================
                      ; Clear subroutine
                      ; =========================
E9D6                  clear
                              ; Prompt for channel
E9D6  8EEDA3                  ldx #clear_prompt_msg
E9D9  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to clear
E9DD  AD9FF808        cl_wfch jsr [inchek]
E9E1  27FA                    beq cl_wfch
E9E3  AD9FF804                jsr [inch]
E9E7  8131                    cmpa #'1'
E9E9  2D1B                    blt cl_done
E9EB  8134                    cmpa #'4'
E9ED  2E17                    bgt cl_done
                      
                              ; Echo channel select
E9EF  1F89                    tfr a,b
E9F1  AD9FF80A                jsr [outch]
                      
                              ; Calculate address of sequence data
E9F5  C031                    subb #49
E9F7  8610                    lda #0x10
E9F9  3D                      mul
E9FA  8E4000                  ldx #seq_data_base
E9FD  3A                      abx
                              
                              ; Clear the channel of existing data
E9FE  C610                    ldb #0x10
EA00  4F                      clra
EA01  A780            cl_loop sta ,x+
EA03  5A                      decb
EA04  26FB                    bne cl_loop
EA06  39              cl_done rts
                      
                      ; =========================
                      ; Record subroutine
                      ; =========================
EA07  39              rc_quit rts
EA08                  record
                              ; Prompt for channel
EA08  8EED75                  ldx #channel_prompt_msg
EA0B  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
EA0F  AD9FF808        rc_wfch jsr [inchek]
EA13  27FA                    beq rc_wfch
EA15  AD9FF804                jsr [inch]
EA19  8173                    cmpa #'s'
EA1B  27EA                    beq rc_quit
EA1D  8131                    cmpa #'1'
EA1F  2DEE                    blt rc_wfch
EA21  8134                    cmpa #'4'
EA23  2EEA                    bgt rc_wfch
                              
                              ; Echo channel select
EA25  1F89                    tfr a,b
EA27  AD9FF80A                jsr [outch]
                              
                              ; Store selected channel
EA2B  C030                    subb #48  ; Convert '1'-'4' to 1-4
EA2D  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
EA30  5A                      decb
EA31  8610                    lda #0x10
EA33  3D                      mul
EA34  8E4000                  ldx #seq_data_base
EA37  3A                      abx
EA38  BF4042                  stx seq_record
                      
                              ; Print record message
EA3B  8EED6A                  ldx #record_msg
EA3E  AD9FF80C                jsr [pdata]
EA42  8606                    lda #6
EA44  BDEBDF                  jsr printspaces
                      
EA47  200F                    bra pb_common
                      
                      
                      ; =========================
                      ; Playback subroutine
                      ; =========================
EA49                  playback
                              ; Print playback symbol
EA49  8EED61                  ldx #playback_msg
EA4C  AD9FF80C                jsr [pdata]
EA50  8607                    lda #7
EA52  BDEBDF                  jsr printspaces
                      
EA55  7F4046                  clr seq_record_ch       ; Set playback channel to 0 (No recording)
EA58                  pb_common       
                              ; Enable interrupts for serial input, allowing processing during playback
EA58  7F4049                  clr seq_in_delay        ; Make sure the interrupts don't mess with anything before it is in the delay
EA5B  BEDFC6                  ldx firq_jump_address
EA5E  3411                    pshs cc,x               ; Save the cc register and the previous irq data, so if firqs are already enabled then they will remain enabled after the function exits
EA60  8EEC5A                  ldx #playback_isr
EA63  BFDFC6                  stx firq_jump_address   ; Set the new irq function
EA66  8680                    lda #0x80               ; Enable serial irqs
EA68  BDEC54                  jsr serial_set_interrupt
EA6B  8601                    lda #1                  ; Enable timer irqs
EA6D  B7E008                  sta timer_io_address
EA70  1CBF                    andcc #0xBF             ; Enable FIRQ
EA72  7F4050                  clr seq_timer_fired             ; Clear pending timer interrupts
                      
                              ; Set the default number of spaces to print between marks
EA75  8602                    lda #2
EA77  B74048                  sta seq_num_spaces
                      
EA7A  867C            pb_run  lda #'|'
EA7C  AD9FF80A                jsr [outch]
                              
EA80  7F4047                  clr seq_cur_beat        ; Set the currently played beat to 0
                              
EA83                  pb_loop 
                              ; Delay
EA83  7C4049                  inc seq_in_delay        ; Note this is under the assumption that pb_loop is always jumped to with seq_in_delay cleared
EA86  BDEBF6                  jsr delay_tempo
                      
                              ; Check if input is pending for changing record channel
EA89  B64046          pb_wait lda seq_record_ch
EA8C  81FE                    cmpa #0xFE
EA8E  27F9                    beq pb_wait
                              
EA90  7F4049                  clr seq_in_delay
                      
                              ; Check if during delay an interrupt fired which stopped playback
EA93  B64046                  lda seq_record_ch
EA96  81FF                    cmpa #0xFF
EA98  2752                    beq pb_done
                      
                              ; Play Beat
EA9A  B64047                  lda seq_cur_beat
EA9D  BDEC13                  jsr play_beat
                      
                              ; ===Print tick===
                      
                              ; Print number of spaces required, then reset the value
EAA0  B64048                  lda seq_num_spaces
EAA3  BDEBDF                  jsr printspaces
EAA6  8602                    lda #2
EAA8  B74048                  sta seq_num_spaces
                              
                              ; Tick will be different for playback vs recording
EAAB  B64046                  lda seq_record_ch
EAAE  2604                    bne pb_rec
                              
                              ; Character to display during playback
EAB0  862E                    lda #'.'
EAB2  2018                    bra pb_drawch
                              
EAB4                  pb_rec  ; This code will run when it is recording
EAB4  BE4042                  ldx seq_record
EAB7  B64047                  lda seq_cur_beat
EABA  E686                    ldb a,x
                              
EABC  8601                    lda #1
EABE                  pb_check_bit
EABE  C501                    bitb #1
EAC0  2608                    bne pb_print_val
EAC2  54                      lsrb
EAC3  4C                      inca
EAC4  8109                    cmpa #9
EAC6  26F6                    bne pb_check_bit
EAC8  86FE                    lda #-2  ; When 48 is added it will turn into a dot
EACA                  pb_print_val
EACA  8B30                    adda #48
EACC                  pb_drawch
EACC  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
EAD0  B64047                  lda seq_cur_beat
EAD3  4C                      inca
EAD4  B74047                  sta seq_cur_beat
EAD7  8110                    cmpa #16
EAD9  2DA8                    blt pb_loop
                      
                              ; If at end of line, start a new one
EADB  867C                    lda #'|'
EADD  AD9FF80A                jsr [outch]
EAE1  AD9FF80E                jsr [pcrlf]
EAE5  860F                    lda #15
EAE7  BDEBDF                  jsr printspaces
EAEA  208E                    bra pb_run
                      
EAEC                  pb_done ; Stop serial interrupts
EAEC  3511                    puls cc,x
EAEE  BFDFC6                  stx firq_jump_address
EAF1  4F                      clra
EAF2  BDEC54                  jsr serial_set_interrupt
EAF5  7FE008                  clr timer_io_address
                      
                              ; Stop any notes being played
EAF8  8EE020                  ldx #seq_io_base
EAFB  4F                      clra
EAFC  5F                      clrb
EAFD  ED84                    std ,x
EAFF  ED02                    std 2,x
                      
EB01  39                      rts
                      
                      
                      ; =========================
                      ; Draw Screen subroutine
                      ; =========================
                      ; Draws the screen displaying the sequence
EB02                  drawscreen
EB02  AD9FF80E                jsr [pcrlf]
EB06  4F                      clra
EB07  3402                    pshs a
                              
EB09                  ds_drawrow
                              ; Print out the pre-padding
EB09  860A                    lda #10 ; Pre-padding
EB0B  BDEBDF                  jsr printspaces
                      
                              ; Print row title
EB0E  3504                    puls b
EB10  3404                    pshs b
EB12  58                      lslb
EB13  8EEE43                  ldx #header_table
EB16  3A                      abx
EB17  AE84                    ldx ,x
EB19  AD9FF80C                jsr [pdata]
                      
                              ; Print space
EB1D  8620                    lda #32
EB1F  AD9FF80A                jsr [outch]
                      
                              ; Print table right border
EB23  C600                    ldb #0
EB25                  ds_draw_border
EB25  3502                    puls a
EB27  3402                    pshs a
EB29  8100                    cmpa #0
EB2B  2702                    beq ds_fr_c
EB2D  861D                    lda #0x1D  ; If A is not the first row, set to '|' (0x7C), else set to 0x5C
EB2F  8B5F            ds_fr_c adda #0x5F
EB31  AD9FF80A                jsr [outch]
EB35  C101                    cmpb #1
EB37  10270093                lbeq ds_loop
                      
                              ; Print contents of table
EB3B  3502                    puls a
EB3D  3402                    pshs a
EB3F  8100                    cmpa #0
EB41  2748                    beq ds_top_row
EB43  8101                    cmpa #1
EB45  2759                    beq ds_beats_row
EB47  8102                    cmpa #2
EB49  273C                    beq ds_mid_row
EB4B  8107                    cmpa #7
EB4D  2738                    beq ds_mid_row
                      
                              ; Else channel row
                              ; Load base address of sequence
EB4F  3502                    puls a
EB51  3402                    pshs a
EB53  8003                    suba #3
EB55  C610                    ldb #0x10
EB57  3D                      mul
EB58  8E4000                  ldx #seq_data_base
EB5B  3A                      abx
                              
EB5C  4F                      clra
EB5D  3402                    pshs a
EB5F                  ds_draw_channel_beat
EB5F  8602                    lda #2
EB61  BDEBDF                  jsr printspaces
EB64  E680                    ldb ,x+
EB66  8601                    lda #1
                      
EB68                  ds_channel_check_bit
EB68  C501                    bitb #1
EB6A  2608                    bne ds_print_channel_val
EB6C  54                      lsrb
EB6D  4C                      inca
EB6E  8109                    cmpa #9
EB70  26F6                    bne ds_channel_check_bit
EB72  86F0                    lda #-16  ; When 48 is added it will turn into a space
                      
EB74                  ds_print_channel_val
EB74  8B30                    adda #48
EB76  AD9FF80A                jsr [outch]
                      
EB7A  3502                    puls a
EB7C  4C                      inca
EB7D  3402                    pshs a
EB7F  8110                    cmpa #16
                      
EB81  26DC                    bne ds_draw_channel_beat
EB83  3502                    puls a
                      
EB85  2042                    bra ds_border_close
                      
                      
EB87                  ds_mid_row
EB87  862D                    lda #'-'
EB89  2002                    bra ds_draw_row
EB8B                  ds_top_row
EB8B  865F                    lda #'_'
EB8D                  ds_draw_row
EB8D  3402                    pshs a
EB8F  C630                    ldb #0x30       ; Row Width: 48
EB91  3502            ds_dr_l puls a          ; Print variable on stack b times
EB93  3402                    pshs a
EB95  AD9FF80A                jsr [outch]
EB99  5A                      decb
EB9A  26F5                    bne ds_dr_l
EB9C  3502                    puls a
EB9E  2029                    bra ds_border_close
                      
EBA0                  ds_beats_row
EBA0  C601                    ldb #1
                      
EBA2                  ds_print_beat
                              ; Print space
EBA2  8620                    lda #32
EBA4  AD9FF80A                jsr [outch]
                      
                              ; Print tens digit, or space
EBA8  8620                    lda #32
EBAA  C10A                    cmpb #10
EBAC  2D02                    blt ds_beat_print_tens
EBAE  8631                    lda #'1'
EBB0                  ds_beat_print_tens
EBB0  AD9FF80A                jsr [outch]
                      
                              ; Print ones digit
EBB4  1F98                    tfr b,a
EBB6  C10A                    cmpb #10
EBB8  2D02                    blt ds_beat_skip_subtract
EBBA  800A                    suba #10
EBBC                  ds_beat_skip_subtract
EBBC  8B30                    adda #48
EBBE  AD9FF80A                jsr [outch]
                      
EBC2  5C                      incb
EBC3  C110                    cmpb #16
EBC5  2FDB                    ble ds_print_beat
                      
EBC7  2000                    bra ds_border_close
                      
                      
                              ; Print table border
EBC9                  ds_border_close
EBC9  C601                    ldb #1
EBCB  16FF57                  lbra ds_draw_border
EBCE                  ds_loop
EBCE  AD9FF80E                jsr [pcrlf]
EBD2  3502                    puls a
EBD4  4C                      inca
                      
EBD5  8108                    cmpa #8
EBD7  2705                    beq ds_done
                              
EBD9  3402                    pshs a
EBDB  16FF2B                  lbra ds_drawrow
                      
EBDE  39              ds_done rts
                      
                      ; =========================
                      ; Print Spaces Subroutine
                      ; =========================
                      ; Prints number of spaces in A register
EBDF                  printspaces
EBDF  3404                    pshs b
EBE1  1F89                    tfr a,b
EBE3  5D              ps_loop tstb
EBE4  270D                    beq ps_done
EBE6  3404                    pshs b
EBE8  8620                    lda #32  ; Load with space
EBEA  AD9FF80A                jsr [outch]
EBEE  3504                    puls b
EBF0  5A                      decb
EBF1  20F0                    bra ps_loop
EBF3  3504            ps_done puls b
EBF5  39                      rts
                      
                      ; =========================
                      ; Delay Subroutine
                      ; =========================
EBF6                  delay_tempo
EBF6  3410                    pshs x
EBF8  8E0000                  ldx #0
EBFB  C601                    ldb #1
EBFD  7D4050                  tst seq_timer_fired
EC00  2605                    bne d_nowait
EC02  7D4050          d_wait  tst seq_timer_fired
EC05  27FB                    beq d_wait
EC07                  d_nowait
EC07  7F4050                  clr seq_timer_fired
EC0A  3A                      abx
EC0B  BC4040                  cmpx seq_tempo
EC0E  26F2                    bne d_wait
                      
EC10  3510                    puls x
EC12  39                      rts
                      
                      ; =========================
                      ; Play Beat Subroutine
                      ; =========================
                      ; The a register should contain the offset
                      ; The b,x register is saved
EC13                  play_beat
EC13  3414                    pshs x,b
                      
                              ; Setup initial address
EC15  8E4000                  ldx #seq_data_base
EC18  1F89                    tfr a,b
EC1A  3A                      abx
EC1B  108EE020                ldy #seq_io_base
                      
                              ; Set channel count to transfer
EC1F  C604                    ldb #4
                              
                              ; Write each channel's value for the given beat
EC21  3404            p_b_wch pshs b
EC23  A684                    lda ,x
EC25  A7A0                    sta ,y+
EC27  C610                    ldb #16
EC29  3A                      abx
EC2A  3504                    puls b
EC2C  5A                      decb
EC2D  26F2                    bne p_b_wch
                      
EC2F  3514                    puls x,b
EC31  39                      rts
                      
                      ; =========================
                      ; Get Beat Subroutine
                      ; =========================
                      ; a is the beat to get
                      ; b is the channel to record to (used in decoding logic)
                      ; x is the address to store data in
                      ; Returns: cc.z = 0 on failure decoding, cc.z = 1 on successful decoding
EC32                  get_beat
EC32  812E                    cmpa #'.'
EC34  2716                    beq gb_clrv
EC36  8120                    cmpa #32
EC38  2717                    beq gb_done
EC3A  8131                    cmpa #'1'
EC3C  2D13                    blt gb_done
EC3E  8138                    cmpa #'8'
EC40  2E0F                    bgt gb_done
                      
                              ; a is now loaded with a character between 1 and 8
                              ; Convert entered character to value
EC42  8030                    suba #48
EC44  C601                    ldb #1
EC46  4A              gb_conv deca
EC47  2704                    beq gb_write
EC49  58                      lslb
EC4A  20FA                    bra gb_conv
EC4C                  gb_clrv ; Create a value to clear when writing to memory
EC4C  5F                      clrb
EC4D                  gb_write
                              ; Write the calculated value to the sequencer memory
EC4D  E784                    stb ,x
                      
                              ; Dirty hack to make it return success on either space or successful decoding
EC4F  8620                    lda #32
EC51  8120            gb_done cmpa #32
EC53  39                      rts
                      
                      ; =========================
                      ; Serial Interrupt Routines
                      ; =========================
                      ; a register: 0x80 for enable interrupts, 0 for disable
EC54                  serial_set_interrupt
EC54  8B11                    adda #serial_base_config
EC56  B7E004                  sta serial_io_address
EC59  39                      rts
                      
EC5A                  playback_isr
EC5A  3406                    pshs a,b
                      
EC5C  AD9FF808                jsr [inchek]            ; Check if interrupt is from key press
EC60  2613                    bne isr_key
                      
EC62  7DE009                  tst timer_io_address+1  ; Check if interrupt is from timer
EC65  2603                    bne isr_timer
                      
EC67  160080                  lbra isr_end            ; Else ignore
                      
EC6A                  isr_timer
EC6A  7FE009                  clr timer_io_address+1
EC6D  8601                    lda #1
EC6F  B74050                  sta seq_timer_fired
EC72  160075                  lbra isr_end
                      
EC75  AD9FF804        isr_key jsr [inch]
                      
                              ; Check if it is okay to do handling of incoming serial data
EC79  F64049                  ldb seq_in_delay
EC7C  276C                    beq isr_end
                      
                              ; Process universal keypresses
EC7E  8173                    cmpa #'s'
EC80  2745                    beq isr_stop_playback
EC82  8170                    cmpa #'p'
EC84  2758                    beq isr_do_playback
EC86  8172                    cmpa #'r'
EC88  2744                    beq isr_do_record
                      
                              ; Process keypresses depending on recording/playback/expecting channel data
EC8A  F64046                  ldb seq_record_ch
EC8D  275B                    beq isr_end     ; Nothing special to do during playback, only universal keypresses
EC8F  C1FF                    cmpb #0xFF
EC91  2757                    beq isr_end     ; Don't do anything special if it is stopping
EC93  C1FE                    cmpb #0xFE
EC95  2712                    beq isr_sel_ch  ; Do channel selection if it is waiting for a channel
                              
                              ; Everything else is recording and b now contains the channel to record to
EC97  3414                    pshs x,b
EC99  F64047                  ldb seq_cur_beat
EC9C  BE4042                  ldx seq_record
EC9F  3A                      abx
ECA0  3504                    puls b
ECA2  BDEC32                  jsr get_beat
ECA5  3510                    puls x
                              
ECA7  2041                    bra isr_end
                      
ECA9                  isr_sel_ch
ECA9  8131                    cmpa #'1'
ECAB  2D3D                    blt isr_end
ECAD  8134                    cmpa #'4'
ECAF  2E39                    bgt isr_end
                              
                              ; Store selected channel
ECB1  8030                    suba #48  ; Convert '1'-'4' to 1-4
ECB3  B74046                  sta seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
ECB6  3410                    pshs x
ECB8  4A                      deca
ECB9  C610                    ldb #0x10
ECBB  3D                      mul
ECBC  8E4000                  ldx #seq_data_base
ECBF  3A                      abx
ECC0  BF4042                  stx seq_record
ECC3  3510                    puls x
                      
ECC5  2023                    bra isr_end
                      
ECC7                  isr_stop_playback
ECC7  86FF                    lda #0xFF
ECC9  B74046                  sta seq_record_ch
ECCC  201C                    bra isr_end
                      
ECCE                  isr_do_record
                              ; Print command to display
ECCE  8652                    lda #'R'
ECD0  AD9FF80A                jsr [outch]
ECD4  7A4048                  dec seq_num_spaces
                      
                              ; Set to wait for pending press to switch recording channel
ECD7  86FE                    lda #0xFE
ECD9  B74046                  sta seq_record_ch
ECDC  200C                    bra isr_end
                      
ECDE                  isr_do_playback
                              ; Print command to display
ECDE  8650                    lda #'P'
ECE0  AD9FF80A                jsr [outch]
ECE4  7A4048                  dec seq_num_spaces
                      
                              ; Set to playback
ECE7  7F4046                  clr seq_record_ch
                      
ECEA  3506            isr_end puls a,b
ECEC  3B                      rti
                      
                      ; =========================
                      ; Data Section
                      ; =========================
ECED  2A2A2A42617369632053657175656E6365722A2A2A0D0A banner  fcc "***Basic Sequencer***\r\n"
ED04  04                      fcb $04
ED05                  controls
ED05  503A20506C6179202D20523A205265636F7264202D20533A2053746F70202D20433A20436C656172204368202D20543A2054656D706F         fcc "P: Play - R: Record - S: Stop - C: Clear Ch - T: Tempo"
ED3B  04                      fcb $04
ED3C                  controls2
ED3C  443A2044697265637420506C61796261636B202D204D3A204D616E75616C20456E747279         fcc "D: Direct Playback - M: Manual Entry"
ED60  04                      fcb $04
ED61                  playback_msg
ED61  506C61796261636B         fcc "Playback"
ED69  04                      fcb $04
ED6A                  record_msg
ED6A  3A526563                fcc ":Rec"
ED6E  04                      fcb $04
ED6F                  manual_msg
ED6F  3A4D616E75              fcc ":Manu"
ED74  04                      fcb $04
ED75                  channel_prompt_msg
ED75  43683F20                fcc "Ch? "
ED79  04                      fcb $04
ED7A                  tempo_prompt_msg
ED7A  456E7465722054656D706F20282E20746F20656E642C206F7468657220746F2061626F7274293A20         fcc "Enter Tempo (. to end, other to abort): "
EDA2  04                      fcb $04
EDA3                  clear_prompt_msg
EDA3  456E746572204368616E6E656C20746F20436C65617220286F7468657220746F2061626F7274293A20         fcc "Enter Channel to Clear (other to abort): "
EDCC  04                      fcb $04
EDCD                  realtime_ch_prompt_msg
EDCD  456E746572204368616E6E656C20746F20506C617920286F7468657220746F2061626F7274293A20         fcc "Enter Channel to Play (other to abort): "
EDF5  04                      fcb $04
EDF6                  realtime_entry_msg
EDF6  0A0D5072657373204B65797320746F20506C61792E2E2E20286320746F206368616E6765206368616E6E656C2C206F7468657220746F2061626F7274290A0D         fcc "\n\rPress Keys to Play... (c to change channel, other to abort)\n\r"
EE35  04                      fcb $04
EE36                  tempo_set_msg
EE36  202D2054656D706F20536574         fcc " - Tempo Set"
EE42  04                      fcb $04
EE43                  header_table
EE43  EE53                    fdb header_blank
EE45  EE58                    fdb header_beat
EE47  EE53                    fdb header_blank
EE49  EE5D                    fdb header_ch1
EE4B  EE62                    fdb header_ch2
EE4D  EE67                    fdb header_ch3
EE4F  EE6C                    fdb header_ch4
EE51  EE53                    fdb header_blank
                      
EE53                  header_blank
EE53  20202020                fcc "    "
EE57  04                      fcb $04
                      
EE58                  header_beat
EE58  42656174                fcc "Beat"
EE5C  04                      fcb $04
                      
EE5D                  header_ch1
EE5D  43682031                fcc "Ch 1"
EE61  04                      fcb $04
                      
EE62                  header_ch2
EE62  43682032                fcc "Ch 2"
EE66  04                      fcb $04
                      
EE67                  header_ch3
EE67  43682033                fcc "Ch 3"
EE6B  04                      fcb $04
                      
EE6C                  header_ch4
EE6C  43682034                fcc "Ch 4"
EE70  04                      fcb $04
