                      ; SWTPC 6809 sequencer program
                      ; Can be jumped into at entry address
                      ; Expects stack to be set up
                      
                      ; =========================
                      ; Monitor Function Addresses
                      ; =========================
F804                  inch    equ $F804
F806                  inche   equ $F806
F808                  inchek  equ $F808
F80A                  outch   equ $F80A
F80C                  pdata   equ $F80C
F80E                  pcrlf   equ $F80E
                      
                      ; =========================
                      ; Key Bindings
                      ; =========================
004D                  playback_key    equ 'M'
004E                  record_key      equ 'N'
005A                  stop_key        equ 'Z'
0043                  clear_key       equ 'C'
0058                  tempo_key       equ 'X'
0042                  realtime_pb_key equ 'B'
0056                  man_entry_key   equ 'V'
0051                  version_key     equ 'Q'
0043                  change_ch_key   equ 'C'
002E                  clear_note_key  equ '.'
0004                  rec_ch1_key     equ $04
0010                  rec_ch2_key     equ $10
0009                  rec_ch3_key     equ $09
0002                  rec_ch4_key     equ $02
                      
                      ; =========================
                      ; Sequencer Addresses
                      ; =========================
E020                  seq_dac_base equ $E020          ; Writing to this address outputs the value on the DAC, scaled to 0-5V
E024                  seq_drum_addr equ $E024         ; Writing to this address sets the drum triggers
E028                  seq_gate_addr equ $E028         ; Writing to this address sets the gate triggers for the analog channels
                      
                      ; =========================
                      ; Memory Addresses
                      ; =========================
4000                  seq_data_base equ $4000         ; The base of channel data (4 0x10-length byte arrays for each channel)
4040                  seq_tempo equ $4040             ; The tempo value
4042                  seq_record equ $4042            ; The address in the data of the track being recorded
4044                  seq_temp_tempo equ $4044        ; The temporary tempo storing the values as a tempo is being entered
4046                  seq_record_ch equ $4046         ; The channel to record sequences to
                                                      ; Note: this variable can take on special values to control the flow of the main playback logic
                                                      ; 0: Not recording, and doing standard playback
                                                      ; 0xFF: Playback stopped, should return to main menu
                                                      ; 0xFE: Playback paused, pending channel input from user to specify which channel to record to
4047                  seq_cur_beat equ $4047          ; The current beat being played
4048                  seq_num_spaces equ $4048        ; The number of spaces to print between markings, allows printing extra info between notes without breaking spacing
4049                  realtime_temp_data equ $4049    ; Address holding temporary data to be played on during realtime playback
404A                  current_octave equ $404a        ; The current octave value to add to keyboard input
404B                  octave_printed equ $404b        ; Set if the current octave has been printed for drawing routines
404C                  get_beat_temp equ $404c         ; Temporary value for get beat when performing addition calculations
404D                  play_beat_temp  equ $404d       ; Temporary value for play beat when performing additional calculations
                      
                      
                      ; =========================
                      ; Default Values
                      ; =========================
01F4                  default_tempo equ 500
0014                  gate_time equ 20
                      
                      ; =========================
                      ; Entry
                      ; =========================
E800                          org $E800
                      
                              ;fcb 0x10
                              ;fcb 0x4a
                              
                              ; Set default tempo
E800  CC01F4                  ldd #default_tempo
E803  FD4040                  std seq_tempo
                      
                              ; Set default ocatve
E806  8667                    lda #103
E808  B7404A                  sta current_octave
                      
                              ; Clear the data memory of existing data
E80B  8E4000                  ldx #seq_data_base
E80E  C640                    ldb #0x40
E810  4F                      clra
E811  A780            data_cl sta ,x+
E813  5A                      decb
E814  26FB                    bne data_cl
                      
                              ; Print banner
E816  AD9FF80E                jsr [pcrlf]
                      
E81A  861E                    lda #30
E81C  BDEC25                  jsr printspaces
E81F  8EEE01                  ldx #banner
E822  AD9FF80C                jsr [pdata]
                      
                              ; Print Controls        
E826  AD9FF80E        redraw  jsr [pcrlf]
E82A  860D                    lda #13
E82C  BDEC25                  jsr printspaces
E82F  8EEE19                  ldx #controls
E832  AD9FF80C                jsr [pdata]
E836  AD9FF80E                jsr [pcrlf]
E83A  8616                    lda #22
E83C  BDEC25                  jsr printspaces
E83F  8EEE50                  ldx #controls2
E842  AD9FF80C                jsr [pdata]
                      
E846  BDEB2F                  jsr drawscreen
E849  AD9FF808        poll    jsr [inchek]
E84D  27FA                    beq poll
                      
E84F  AD9FF804                jsr [inch]
                      ;       cmpa #'f'
                      ;       beq crashme
E853  814D                    cmpa #playback_key
E855  271A                    beq do_playback
E857  814E                    cmpa #record_key
E859  271B                    beq do_record
E85B  8158                    cmpa #tempo_key
E85D  271C                    beq do_tempo
E85F  8143                    cmpa #clear_key
E861  271D                    beq do_clear
E863  8142                    cmpa #realtime_pb_key
E865  271E                    beq do_realtime_playback
E867  8156                    cmpa #man_entry_key
E869  271F                    beq do_manual_entry
E86B  8151                    cmpa #version_key
E86D  2720                    beq do_version
                      
E86F  20D8                    bra poll
E871                  do_playback
E871  BDEAAB                  jsr playback
E874  20B0                    bra redraw
E876                  do_record
E876  BDEA6A                  jsr record
E879  20AB                    bra redraw
E87B                  do_tempo
E87B  BDE9CC                  jsr tempo
E87E  20A6                    bra redraw
E880                  do_clear
E880  BDEA29                  jsr clear
E883  20A1                    bra redraw
E885                  do_realtime_playback
E885  BDE93F                  jsr realtime_playback
E888  209C                    bra redraw
E88A                  do_manual_entry
E88A  BDE898                  jsr manual_entry
E88D  2097                    bra redraw
E88F                  do_version
E88F  8EEE75                  ldx #version
E892  AD9FF80C                jsr [pdata]
E896  208E                    bra redraw
                      ;crashme
                      ;       ldx #cm_msg
                      ;       jsr [pdata]
                      ;crashmenow
                      ;       fcb $10
                      ;       fcb $45
                      ;cm_msg fcc "ManCrash"
                      ;       fcb $4
                      
                      ; =========================
                      ; Manual Entry subroutine
                      ; =========================
E898                  manual_entry
                              ; Set initial state
E898  7F404B                  clr octave_printed
                      
                              ; Prompt for channel
E89B  8EEEBB                  ldx #channel_prompt_msg
E89E  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
E8A2  AD9FF808        me_wfch jsr [inchek]
E8A6  27FA                    beq me_wfch
E8A8  AD9FF804                jsr [inch]
E8AC  815A                    cmpa #stop_key
E8AE  10270089                lbeq me_done
E8B2  8131                    cmpa #'1'
E8B4  2DEC                    blt me_wfch
E8B6  8134                    cmpa #'4'
E8B8  2EE8                    bgt me_wfch
                              
                              ; Echo channel select
E8BA  1F89                    tfr a,b
E8BC  AD9FF80A                jsr [outch]
                      
                              ; Store channel
E8C0  C030                    subb #48
E8C2  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address (stored in x)
E8C5  5A                      decb
E8C6  8610                    lda #0x10
E8C8  3D                      mul
E8C9  8E4000                  ldx #seq_data_base
E8CC  3A                      abx
                      
E8CD  3410                    pshs x
                              ; Print manual message
E8CF  8EEEB5                  ldx #manual_msg
E8D2  AD9FF80C                jsr [pdata]
E8D6  8605                    lda #5
E8D8  BDEC25                  jsr printspaces
E8DB  3510                    puls x
                      
E8DD  867C                    lda #'|'
E8DF  AD9FF80A                jsr [outch]
                      
                              ; Set the default number of spaces to print between marks
E8E3  8602                    lda #2
E8E5  B74048                  sta seq_num_spaces
                      
E8E8  108E4047                ldy #seq_cur_beat
E8EC  6FA4                    clr ,y
E8EE  AD9FF808        me_loop jsr [inchek]
E8F2  27FA                    beq me_loop
E8F4  AD9FF804                jsr [inch]
                      
                              ; Check for stop
E8F8  815A                    cmpa #stop_key
E8FA  273F                    beq me_done
                      
                              ; Do input processing
E8FC  F64046                  ldb seq_record_ch
E8FF  BDECC2                  jsr get_beat
E902  26EA                    bne me_loop
                      
                              ; Play Beat
E904  A6A4                    lda ,y
E906  BDEC7B                  jsr play_beat
E909  BDEC68                  jsr delay_gate_time
                      
                              ; ===Print tick===
E90C  B64048                  lda seq_num_spaces
E90F  4D                      tsta
E910  2A01                    bpl me_pspa
E912  4F                      clra
E913  BDEC25          me_pspa jsr printspaces
E916  8602                    lda #2
E918  B74048                  sta seq_num_spaces
                              
E91B  E680                    ldb ,x+
E91D  862E                    lda #46
E91F  5D                      tstb
E920  2702                    beq me_drawch
E922  8BFC                    adda #-4
E924                  me_drawch
E924  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
E928  A6A4                    lda ,y
E92A  4C                      inca
E92B  A7A4                    sta ,y
E92D  8110                    cmpa #16
E92F  2DBD                    blt me_loop
                      
                              ; If at end of line, print line terminator and quit
E931  867C                    lda #'|'
E933  AD9FF80A                jsr [outch]
E937  AD9FF80E                jsr [pcrlf]
                      
E93B                  me_done ; Stop any notes being played
E93B  BDED34                  jsr stop_pb
                      
E93E  39                      rts
                      
                      
                      ; =========================
                      ; Realtime Playback subroutine
                      ; =========================
E93F                  realtime_playback
                              ; Set initial state
E93F  7F404B                  clr octave_printed
                      
                              ; Clear any pending played notes (when called internally)
E942  BDED34                  jsr stop_pb
                      
E945  8EEF1F                  ldx #realtime_ch_prompt_msg
E948  AD9FF80C                jsr [pdata]
                      
E94C  AD9FF808        rp_wfch jsr [inchek]
E950  27FA                    beq rp_wfch
E952  AD9FF804                jsr [inch]
E956  8131                    cmpa #'1'
E958  2D6E                    blt rp_done
E95A  8134                    cmpa #'4'
E95C  2E6A                    bgt rp_done
                      
                              ; Echo selected channel to console, and give prompt to play data
E95E  3402                    pshs a
E960  AD9FF80A                jsr [outch]
E964  8EEF48                  ldx #realtime_entry_msg
E967  AD9FF80C                jsr [pdata]
E96B  3504                    puls b
                      
                              ; Load the address to write channel data to
E96D  C030                    subb #48
E96F  F74046                  stb seq_record_ch
E972  5A                      decb
E973  8EE020                  ldx #seq_dac_base
E976  3A                      abx
                      
                              ; Check if drum channel, so its record address can be overidden
E977  C103                    cmpb #3
E979  2603                    bne rp_prep
E97B  8EE024                  ldx #seq_drum_addr
                      
                              ; Make y the actual io address,
                              ; And x will be the temporary realtime data
                              ; Required for drum data or-ing
E97E  1F12            rp_prep tfr x,y
E980  8E4049                  ldx #realtime_temp_data
                      
                              ; Get input from user
E983  7D404B          rp_play tst octave_printed
E986  270E                    beq rp_inc
E988  7F404B                  clr octave_printed
E98B  3410                    pshs x
E98D  8EEFBF                  ldx #oct_change_rp
E990  AD9FF80C                jsr [pdata]
E994  3510                    puls x
                      
E996  AD9FF808        rp_inc  jsr [inchek]
E99A  27E7                    beq rp_play
E99C  AD9FF804                jsr [inch]
E9A0  8143                    cmpa #change_ch_key
E9A2  279B                    beq realtime_playback
E9A4  815A                    cmpa #stop_key
E9A6  2720                    beq rp_done
                      
                              ; Do processing on input data
E9A8  F64046                  ldb seq_record_ch
E9AB  6F84                    clr ,x
E9AD  BDECC2                  jsr get_beat
E9B0  26D1                    bne rp_play
                      
                              ; Store temporary register into actual memory
E9B2  A684                    lda ,x
E9B4  A7A4                    sta ,y
                      
                              ; Calculate and set the gate for the channel being played
E9B6  F64046                  ldb seq_record_ch
E9B9  8601                    lda #1
E9BB  48              rp_gate lsla
E9BC  5A                      decb
E9BD  26FC                    bne rp_gate
E9BF  44                      lsra
E9C0  B7E028                  sta seq_gate_addr
                      
E9C3  BDEC68                  jsr delay_gate_time
                      
E9C6  20BB                    bra rp_play
                      
E9C8                  rp_done ; Stop any pending playback
E9C8  BDED34                  jsr stop_pb
                      
E9CB  39                      rts
                      
                      ; =========================
                      ; Tempo subroutine
                      ; =========================
E9CC                  tempo
E9CC  8EEEC0                  ldx #tempo_prompt_msg
E9CF  AD9FF80C                jsr [pdata]
                      
                              ; Clear temporary tempo
E9D3  CC0000                  ldd #0
E9D6  FD4044                  std seq_temp_tempo
                      
E9D9  AD9FF808        t_waitc jsr [inchek]
E9DD  27FA                    beq t_waitc
E9DF  AD9FF804                jsr [inch]
E9E3  810D                    cmpa #$0D
E9E5  2727                    beq t_check
E9E7  AD9FF80A                jsr [outch]
E9EB  8130                    cmpa #'0'
E9ED  2D35                    blt t_done
E9EF  8139                    cmpa #'9'
E9F1  2E31                    bgt t_done
                      
                              ; Convert char to number
E9F3  8030                    suba #48
E9F5  3402                    pshs a
                      
                              ; Multiply existing temporary tempo by 10 and add entered number
E9F7  108E4044                ldy #seq_temp_tempo
E9FB  E621                    ldb 1,y
E9FD  860A                    lda #10
E9FF  3D                      mul
EA00  1F01                    tfr d,x
EA02  3504                    puls b
EA04  3A                      abx
EA05  AFA4                    stx ,y
                      
                              ; If the number is too big to fit into b before multiplication, write it (gives range of 2559)
EA07  8C00FF                  cmpx #255
EA0A  2E02                    bgt t_check
                      
EA0C  20CB                    bra t_waitc
EA0E  FC4044          t_check ldd seq_temp_tempo
                      
                              ; Ensure the tempo doesn't go under minimum gate time
EA11  10830014                cmpd #gate_time
EA15  2C03                    bge t_write
EA17  CC0014                  ldd #gate_time
EA1A  FD4040          t_write std seq_tempo
                      
EA1D  8EEF84                  ldx #tempo_set_msg
EA20  AD9FF80C                jsr [pdata]
EA24  AD9FF80E        t_done  jsr [pcrlf]
EA28  39                      rts
                      
                      ; =========================
                      ; Clear subroutine
                      ; =========================
EA29                  clear
                              ; Prompt for channel
EA29  8EEEED                  ldx #clear_prompt_msg
EA2C  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to clear
EA30  AD9FF808        cl_wfch jsr [inchek]
EA34  27FA                    beq cl_wfch
EA36  AD9FF804                jsr [inch]
EA3A  8141                    cmpa #'A'
EA3C  2720                    beq cl_all
EA3E  8131                    cmpa #'1'
EA40  2D1B                    blt cl_done
EA42  8134                    cmpa #'4'
EA44  2E17                    bgt cl_done
                      
                              ; Echo channel select
EA46  1F89                    tfr a,b
EA48  AD9FF80A                jsr [outch]
                      
                              ; Calculate address of sequence data
EA4C  C031                    subb #49
                      
                              ; Jump into subroutine at this point to clear channel with b = channel-1 to clear
EA4E                  clear_channel
EA4E  8610                    lda #0x10
EA50  3D                      mul
EA51  8E4000                  ldx #seq_data_base
EA54  3A                      abx
                              
                              ; Clear the channel of existing data
EA55  C610                    ldb #0x10
EA57                  cl_loop_entry
EA57  4F                      clra
EA58  A780            cl_loop sta ,x+
EA5A  5A                      decb
EA5B  26FB                    bne cl_loop
EA5D                  cl_done
EA5D  39                      rts
                      
EA5E                  cl_all  ; Clear all channels
EA5E  AD9FF80A                jsr [outch]
EA62  8E4000                  ldx #seq_data_base
EA65  C640                    ldb #0x40
EA67  20EE                    bra cl_loop_entry
                      
                      ; =========================
                      ; Record subroutine
                      ; =========================
EA69  39              rc_quit rts
EA6A                  record
                              ; Prompt for channel
EA6A  8EEEBB                  ldx #channel_prompt_msg
EA6D  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
EA71  AD9FF808        rc_wfch jsr [inchek]
EA75  27FA                    beq rc_wfch
EA77  AD9FF804                jsr [inch]
EA7B  815A                    cmpa #stop_key
EA7D  27EA                    beq rc_quit
EA7F  8131                    cmpa #'1'
EA81  2DEE                    blt rc_wfch
EA83  8134                    cmpa #'4'
EA85  2EEA                    bgt rc_wfch
                              
                              ; Echo channel select
EA87  1F89                    tfr a,b
EA89  AD9FF80A                jsr [outch]
                              
                              ; Store selected channel
EA8D  C030                    subb #48  ; Convert '1'-'4' to 1-4
EA8F  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
EA92  5A                      decb
EA93  8610                    lda #0x10
EA95  3D                      mul
EA96  8E4000                  ldx #seq_data_base
EA99  3A                      abx
EA9A  BF4042                  stx seq_record
                      
                              ; Print record message
EA9D  8EEEB0                  ldx #record_msg
EAA0  AD9FF80C                jsr [pdata]
EAA4  8606                    lda #6
EAA6  BDEC25                  jsr printspaces
                      
EAA9  200F                    bra pb_common
                      
                      
                      ; =========================
                      ; Playback subroutine
                      ; =========================
EAAB                  playback
                              ; Print playback symbol
EAAB  8EEEA7                  ldx #playback_msg
EAAE  AD9FF80C                jsr [pdata]
EAB2  8607                    lda #7
EAB4  BDEC25                  jsr printspaces
                      
EAB7  7F4046                  clr seq_record_ch       ; Set playback channel to 0 (No recording)
EABA                  pb_common
                              ; Set the default number of spaces to print between marks
EABA  8602                    lda #2
EABC  B74048                  sta seq_num_spaces
                      
EABF  867C            pb_run  lda #'|'
EAC1  AD9FF80A                jsr [outch]
                              
EAC5  7F4047                  clr seq_cur_beat        ; Set the currently played beat to 0
                              
EAC8                  pb_loop 
                              ; Delay
EAC8  BDEC3C                  jsr delay_tempo
                      
                              ; Check if input is pending for changing record channel
EACB  B64046          pb_wait lda seq_record_ch
EACE  81FE                    cmpa #0xFE
EAD0  2605                    bne pb_ckqt
EAD2  BDED48                  jsr isr_key             ; This will block until a key is entered
EAD5  20F4                    bra pb_wait
                      
EAD7                  pb_ckqt ; Check if during delay an interrupt fired which stopped playback
EAD7  B64046                  lda seq_record_ch
EADA  81FF                    cmpa #0xFF
EADC  274D                    beq pb_done
                      
                              ; Play Beat
EADE  B64047                  lda seq_cur_beat
EAE1  BDEC7B                  jsr play_beat
                      
                              ; ===Print tick===
                      
                              ; Print number of spaces required, then reset the value
EAE4  B64048                  lda seq_num_spaces
EAE7  4D                      tsta
EAE8  2A01                    bpl pb_pspa
EAEA  4F                      clra
EAEB  BDEC25          pb_pspa jsr printspaces
EAEE  8602                    lda #2
EAF0  B74048                  sta seq_num_spaces
                              
                              ; Tick will be different for playback vs recording
EAF3  B64046                  lda seq_record_ch
EAF6  2604                    bne pb_rec
                              
                              ; Character to display during playback
EAF8  862E                    lda #'.'
EAFA  200F                    bra pb_drawch
                              
EAFC                  pb_rec  ; This code will run when it is recording
EAFC  BE4042                  ldx seq_record
EAFF  B64047                  lda seq_cur_beat
EB02  E686                    ldb a,x
                              
EB04  862E                    lda #46
EB06  5D                      tstb
EB07  2702                    beq pb_drawch
EB09  8BFC                    adda #-4
EB0B                  pb_drawch
EB0B  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
EB0F  B64047                  lda seq_cur_beat
EB12  4C                      inca
EB13  B74047                  sta seq_cur_beat
EB16  8110                    cmpa #16
EB18  2DAE                    blt pb_loop
                      
                              ; If at end of line, start a new one
EB1A  867C                    lda #'|'
EB1C  AD9FF80A                jsr [outch]
EB20  AD9FF80E                jsr [pcrlf]
EB24  860F                    lda #15
EB26  BDEC25                  jsr printspaces
EB29  2094                    bra pb_run
                      
EB2B                  pb_done ; Stop any notes being played
EB2B  BDED34                  jsr stop_pb
                      
EB2E  39                      rts
                      
                      
                      ; =========================
                      ; Draw Screen subroutine
                      ; =========================
                      ; Draws the screen displaying the sequence
EB2F                  drawscreen
EB2F  AD9FF80E                jsr [pcrlf]
EB33  5F                      clrb
EB34  3404                    pshs b
                              
EB36                  ds_drawrow
                              ; Print out the pre-padding
EB36  860A                    lda #10 ; Pre-padding without channel id
                      
                              ; Channel headers get lower spacing for channel id prefix
EB38  C103                    cmpb #3
EB3A  2D06                    blt ds_pleadspaces
EB3C  C107                    cmpb #7
EB3E  2C02                    bge ds_pleadspaces
EB40  8607                    lda #7 ; Pre-padding with channel id
EB42                  ds_pleadspaces
EB42  BDEC25                  jsr printspaces
                      
EB45  C103                    cmpb #3
EB47  2D18                    blt ds_printheader
EB49  C107                    cmpb #7
EB4B  2C14                    bge ds_printheader
EB4D  1F98                    tfr b,a
EB4F  8B2E                    adda #46
EB51  AD9FF80A                jsr [outch]
EB55  863A                    lda #':'
EB57  AD9FF80A                jsr [outch]
EB5B  8620                    lda #32
EB5D  AD9FF80A                jsr [outch]
                      
EB61                  ds_printheader
                              ; Print row title
EB61  58                      lslb
EB62  8EEF91                  ldx #header_table
EB65  3A                      abx
EB66  AE84                    ldx ,x
EB68  AD9FF80C                jsr [pdata]
                      
                              ; Print space
EB6C  8620                    lda #32
EB6E  AD9FF80A                jsr [outch]
                      
                              ; Print table right border
EB72  C600                    ldb #0
EB74                  ds_draw_border
EB74  3502                    puls a
EB76  3402                    pshs a
EB78  8100                    cmpa #0
EB7A  2702                    beq ds_fr_c
EB7C  861D                    lda #0x1D  ; If A is not the first row, set to '|' (0x7C), else set to 0x5C
EB7E  8B5F            ds_fr_c adda #0x5F
EB80  AD9FF80A                jsr [outch]
EB84  C101                    cmpb #1
EB86  1027008A                lbeq ds_loop
                      
                              ; Print contents of table
EB8A  3502                    puls a
EB8C  3402                    pshs a
EB8E  8100                    cmpa #0
EB90  273F                    beq ds_top_row
EB92  8101                    cmpa #1
EB94  2750                    beq ds_beats_row
EB96  8102                    cmpa #2
EB98  2733                    beq ds_mid_row
EB9A  8107                    cmpa #7
EB9C  272F                    beq ds_mid_row
                      
                              ; Else channel row
                              ; Load base address of sequence
EB9E  3502                    puls a
EBA0  3402                    pshs a
EBA2  8003                    suba #3
EBA4  C610                    ldb #0x10
EBA6  3D                      mul
EBA7  8E4000                  ldx #seq_data_base
EBAA  3A                      abx
                              
EBAB  4F                      clra
EBAC  3402                    pshs a
EBAE                  ds_draw_channel_beat
EBAE  8602                    lda #2
EBB0  BDEC25                  jsr printspaces
EBB3  E680                    ldb ,x+
EBB5  8620                    lda #32
EBB7  5D                      tstb
EBB8  2702                    beq ds_print_channel_val
EBBA  8B0A                    adda #10
EBBC                  ds_print_channel_val
EBBC  AD9FF80A                jsr [outch]
                      
EBC0  3502                    puls a
EBC2  4C                      inca
EBC3  3402                    pshs a
EBC5  8110                    cmpa #16
                      
EBC7  26E5                    bne ds_draw_channel_beat
EBC9  3502                    puls a
                      
EBCB  2042                    bra ds_border_close
                      
                      
EBCD                  ds_mid_row
EBCD  862D                    lda #'-'
EBCF  2002                    bra ds_draw_row
EBD1                  ds_top_row
EBD1  865F                    lda #'_'
EBD3                  ds_draw_row
EBD3  3402                    pshs a
EBD5  C630                    ldb #0x30       ; Row Width: 48
EBD7  3502            ds_dr_l puls a          ; Print variable on stack b times
EBD9  3402                    pshs a
EBDB  AD9FF80A                jsr [outch]
EBDF  5A                      decb
EBE0  26F5                    bne ds_dr_l
EBE2  3502                    puls a
EBE4  2029                    bra ds_border_close
                      
EBE6                  ds_beats_row
EBE6  C601                    ldb #1
                      
EBE8                  ds_print_beat
                              ; Print space
EBE8  8620                    lda #32
EBEA  AD9FF80A                jsr [outch]
                      
                              ; Print tens digit, or space
EBEE  8620                    lda #32
EBF0  C10A                    cmpb #10
EBF2  2D02                    blt ds_beat_print_tens
EBF4  8631                    lda #'1'
EBF6                  ds_beat_print_tens
EBF6  AD9FF80A                jsr [outch]
                      
                              ; Print ones digit
EBFA  1F98                    tfr b,a
EBFC  C10A                    cmpb #10
EBFE  2D02                    blt ds_beat_skip_subtract
EC00  800A                    suba #10
EC02                  ds_beat_skip_subtract
EC02  8B30                    adda #48
EC04  AD9FF80A                jsr [outch]
                      
EC08  5C                      incb
EC09  C110                    cmpb #16
EC0B  2FDB                    ble ds_print_beat
                      
EC0D  2000                    bra ds_border_close
                      
                      
                              ; Print table border
EC0F                  ds_border_close
EC0F  C601                    ldb #1
EC11  16FF60                  lbra ds_draw_border
EC14                  ds_loop
EC14  AD9FF80E                jsr [pcrlf]
EC18  3504                    puls b
EC1A  5C                      incb
                      
EC1B  C108                    cmpb #8
EC1D  2705                    beq ds_done
                              
EC1F  3404                    pshs b
EC21  16FF12                  lbra ds_drawrow
                      
EC24  39              ds_done rts
                      
                      ; =========================
                      ; Print Spaces Subroutine
                      ; =========================
                      ; Prints number of spaces in A register
EC25                  printspaces
EC25  3404                    pshs b
EC27  1F89                    tfr a,b
EC29  5D              ps_loop tstb
EC2A  270D                    beq ps_done
EC2C  3404                    pshs b
EC2E  8620                    lda #32  ; Load with space
EC30  AD9FF80A                jsr [outch]
EC34  3504                    puls b
EC36  5A                      decb
EC37  20F0                    bra ps_loop
EC39  3504            ps_done puls b
EC3B  39                      rts
                      
                      ; =========================
                      ; Delay Subroutine
                      ; =========================
                      ; x,y register is saved
EC3C                  delay_tempo
EC3C  3430                    pshs x,y
EC3E  1F12                    tfr x,y
EC40  8E0000                  ldx #0
EC43  C601                    ldb #1
EC45  4F              d_ms    clra
EC46  4C              d_cyc   inca
EC47  AD9FF808                jsr [inchek]
EC4B  2703                    beq d_nkey
EC4D  BDED48                  jsr isr_key
EC50  814A            d_nkey  cmpa #74
EC52  26F2                    bne d_cyc
                      
EC54  3A                      abx
EC55  8C0014                  cmpx #gate_time
EC58  2606                    bne d_cnt
EC5A  7FE028                  clr seq_gate_addr
EC5D  7FE024                  clr seq_drum_addr
EC60  BC4040          d_cnt   cmpx seq_tempo
EC63  26E0                    bne d_ms
EC65  3530                    puls x,y
EC67  39                      rts
                      
                      ; =========================
                      ; Delay Gate Time Subroutine
                      ; =========================
                      ; a,b registers are not saved
EC68                  delay_gate_time
                              ; Delay for approx. gate_time to give time for gate to settle when performing playback
                              ; Clears gates and drum channels at end of subroutine
                              
EC68  CC0F00                  ldd #$C0*gate_time
EC6B  AD9FF808        rp_cyc  jsr [inchek]    ; Waste cycles, value being thrown out
EC6F  830001                  subd #1
EC72  26F7                    bne rp_cyc
                      
EC74  7FE028                  clr seq_gate_addr
EC77  7FE024                  clr seq_drum_addr
EC7A  39                      rts
                      
                      ; =========================
                      ; Play Beat Subroutine
                      ; =========================
                      ; The a register should contain the offset
                      ; The b,x,y register is saved
EC7B                  play_beat
EC7B  3434                    pshs x,y,b
                      
                              ; Setup initial address
EC7D  8E4000                  ldx #seq_data_base
EC80  1F89                    tfr a,b
EC82  3A                      abx
EC83  3410                    pshs x                  ; Save x register to be pulled again to save calculation time
EC85  108EE020                ldy #seq_dac_base
                      
                              ; Set channel count to transfer to dac
EC89  C603                    ldb #3
                              
                              ; Write each channel's value for the given beat
EC8B  3404            p_b_wch pshs b
EC8D  A684                    lda ,x
EC8F  A7A0                    sta ,y+
EC91  C610                    ldb #16
EC93  3A                      abx
EC94  3504                    puls b
EC96  5A                      decb
EC97  26F2                    bne p_b_wch
                      
                              ; Finally store last A value into drum channel
EC99  A684                    lda ,x
EC9B  B7E024                  sta seq_drum_addr
                      
                              ; Recalculate the gate
                              ; This is fine loop through again, since there will need to be at least 20us for the DAC to settle, so we can waste some time
EC9E  3510                    puls x
ECA0  8601                    lda #1                  ; temp register contains the value to or for that specific channel if it is non-zero for gating
ECA2  B7404D                  sta play_beat_temp
ECA5  4F                      clra                    ; a contains the value to write to the gate
ECA6  C604                    ldb #4                  ; b contains number of channels to search
ECA8  6D84            p_b_cg  tst ,x
ECAA  2703                    beq p_b_ng
ECAC  BA404D                  ora play_beat_temp
ECAF  78404D          p_b_ng  lsl play_beat_temp
ECB2  3404                    pshs b
ECB4  C610                    ldb #16
ECB6  3A                      abx
ECB7  3504                    puls b
ECB9  5A                      decb
ECBA  26EC                    bne p_b_cg
                      
ECBC  B7E028                  sta seq_gate_addr
                      
ECBF  3534                    puls x,y,b
ECC1  39                      rts
                      
                      ; =========================
                      ; Get Beat Subroutine
                      ; =========================
                      ; a is the beat to get
                      ; b is the channel to record to (used in decoding logic)
                      ; x is the address to store data in
                      ; Saves y,x
                      ; Returns: cc.z = 0 on no data written, cc.z = 1 on data written
ECC2                  get_beat
ECC2  3420                    pshs y
ECC4  812E                    cmpa #clear_note_key
ECC6  2762                    beq gb_clrv
ECC8  8120                    cmpa #32
ECCA  2763                    beq gb_done
ECCC  C104                    cmpb #4         ; If on drum channel, do different decoding
ECCE  2744                    beq gb_drum
                      
                              ; Check for octave lookup
ECD0  8131                    cmpa #'1'
ECD2  2D1C                    blt gb_decode_key_seq
ECD4  8134                    cmpa #'4'
ECD6  2E18                    bgt gb_decode_key_seq
                              ; Set octave
                              
                              ; Print octave
ECD8  AD9FF80A                jsr [outch]
                      
                              ; Update state for octave input
ECDC  7A4048                  dec seq_num_spaces
ECDF  C601                    ldb #1
ECE1  F7404B                  stb octave_printed
                      
ECE4  8031                    suba #49        ; Convert octave to value 0-3
                      
                              ; Do octave conversion math
ECE6  C633                    ldb #51
ECE8  3D                      mul
ECE9  5C                      incb
ECEA  F7404A                  stb current_octave
                      
ECED  4F                      clra
ECEE  203F                    bra gb_done
                      
ECF0                  gb_decode_key_seq
                              ; Try lookup key
                      
                              ; Load y with the keyboard_seq lookup string
                              ; Search through y until either character is found or $04 is reached
ECF0  108EEFC6                ldy #keyboard_sequence
                              ; b register contains value at end of index string (when search is finished)
ECF4  C604                    ldb #4
ECF6                  gb_lookup_key_loop
ECF6  E1A4                    cmpb ,y
ECF8  2735                    beq gb_done
ECFA  A1A0                    cmpa ,y+
ECFC  26F8                    bne gb_lookup_key_loop
                              
ECFE  1F20                    tfr y,d
ED00  B3EFD9                  subd keyboard_seq_offset
                      
                              ; b now contains the # of half-steps up from A
ED03  1F98                    tfr b,a
                              ; Divide by 4
ED05  44                      lsra
ED06  44                      lsra
ED07  B7404C                  sta get_beat_temp
                      
                              ; Also multiply by 4
ED0A  58                      lslb
ED0B  58                      lslb
                              ; Add the val/4 + val*4
ED0C  FB404C                  addb get_beat_temp
                              ; Add octave offset
ED0F  FB404A                  addb current_octave
                      
ED12  2017                    bra gb_write
                      
ED14                  gb_drum ; Decode Drum Data
ED14  8131                    cmpa #'1'
ED16  2D17                    blt gb_done
ED18  8138                    cmpa #'8'
ED1A  2E13                    bgt gb_done
                      
                              ; a is now loaded with a character between 1 and 8
                              ; Convert entered character to value
ED1C  8030                    suba #48
ED1E  C601                    ldb #1
ED20  4A              gb_conv deca
ED21  2703                    beq gb_or_data
ED23  58                      lslb
ED24  20FA                    bra gb_conv
ED26                  gb_or_data
ED26  EA84                    orb ,x
ED28  2001                    bra gb_write
                      
ED2A                  gb_clrv ; Create a value to clear when writing to memory
ED2A  5F                      clrb
ED2B                  gb_write
                              ; Write the calculated value to the sequencer memory
ED2B  E784                    stb ,x
                      
                              ; Dirty hack to make it return success on either space or successful decoding
ED2D  8620                    lda #32
ED2F  3520            gb_done puls y
ED31  8120                    cmpa #32
ED33  39                      rts
                      
                      ; =========================
                      ; Stop Playback Subroutine
                      ; =========================
                      ; Clears all 4 DAC channels, the 8 drum channels, and the gate signals
                      ; Does not take any arguments
                      ; Saves a,b,x,y
ED34                  stop_pb
ED34  3416                    pshs x,a,b
ED36  8EE020                  ldx #seq_dac_base
ED39  4F                      clra
ED3A  5F                      clrb
ED3B  ED84                    std ,x
ED3D  ED02                    std 2,x
ED3F  7FE024                  clr seq_drum_addr
ED42  7FE028                  clr seq_gate_addr
ED45  3516                    puls x,a,b
ED47  39                      rts
                      
ED48  3406            isr_key pshs a,b
                              
ED4A  F64046                  ldb seq_record_ch
ED4D  C1FF                    cmpb #0xFF
ED4F  2761                    beq isr_end     ; Don't process any keypresses if stopping
                              
ED51  AD9FF804                jsr [inch]
                      
                              ; Process universal keypresses
ED55  815A                    cmpa #stop_key
ED57  2754                    beq isr_stop_playback
ED59  814D                    cmpa #playback_key
ED5B  2768                    beq isr_do_playback
ED5D  814E                    cmpa #record_key
ED5F  2754                    beq isr_do_record
                      
                              ; Process keypresses depending on recording/playback/expecting channel data
ED61  C100                    cmpb #0
ED63  274D                    beq isr_end     ; Nothing special to do during playback, only universal keypresses
ED65  C1FE                    cmpb #0xFE
ED67  2726                    beq isr_sel_ch  ; Do channel selection if it is waiting for a channel
                      
                              ; Check if keypress is change channel
ED69  8104                    cmpa #rec_ch1_key
ED6B  2766                    beq isr_set_ch1
ED6D  8110                    cmpa #rec_ch2_key
ED6F  2766                    beq isr_set_ch2
ED71  8109                    cmpa #rec_ch3_key
ED73  2766                    beq isr_set_ch3
ED75  8102                    cmpa #rec_ch4_key
ED77  2766                    beq isr_set_ch4
                      
                              ; Check if keypress is clear
ED79  8143                    cmpa #clear_key
ED7B  2771                    beq isr_do_clear
                              
                              ; Everything else is recording and b now contains the channel to record to
ED7D  3414                    pshs x,b
ED7F  F64047                  ldb seq_cur_beat
ED82  BE4042                  ldx seq_record
ED85  3A                      abx
ED86  3504                    puls b
ED88  BDECC2                  jsr get_beat
ED8B  3510                    puls x
                              
ED8D  2023                    bra isr_end
                      
ED8F                  isr_sel_ch
ED8F  8131                    cmpa #'1'
ED91  2D1F                    blt isr_end
ED93  8134                    cmpa #'4'
ED95  2E1B                    bgt isr_end
                      
ED97                  isr_write_ch
                              ; Store selected channel
ED97  8030                    suba #48  ; Convert '1'-'4' to 1-4
ED99  B74046                  sta seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
ED9C  3410                    pshs x
ED9E  4A                      deca
ED9F  C610                    ldb #0x10
EDA1  3D                      mul
EDA2  8E4000                  ldx #seq_data_base
EDA5  3A                      abx
EDA6  BF4042                  stx seq_record
EDA9  3510                    puls x
                      
EDAB  2005                    bra isr_end
                      
EDAD                  isr_stop_playback
EDAD  86FF                    lda #0xFF
EDAF  B74046                  sta seq_record_ch
                      
EDB2  3506            isr_end puls a,b
EDB4  39                      rts
                      
EDB5                  isr_do_record
                              ; Print command to display
EDB5  8652                    lda #'R'
EDB7  AD9FF80A                jsr [outch]
EDBB  7A4048                  dec seq_num_spaces
                      
                              ; Set to wait for pending press to switch recording channel
EDBE  86FE                    lda #0xFE
EDC0  B74046                  sta seq_record_ch
EDC3  20ED                    bra isr_end
                      
EDC5                  isr_do_playback
                              ; Print command to display
EDC5  8650                    lda #'P'
EDC7  AD9FF80A                jsr [outch]
EDCB  7A4048                  dec seq_num_spaces
                      
                              ; Set to playback
EDCE  7F4046                  clr seq_record_ch
EDD1  20DF                    bra isr_end
                      
EDD3                  isr_set_ch1
EDD3  8601                    lda #1
EDD5  200C                    bra isr_set_ch
EDD7                  isr_set_ch2
EDD7  8602                    lda #2
EDD9  2008                    bra isr_set_ch
EDDB                  isr_set_ch3
EDDB  8603                    lda #3
EDDD  2004                    bra isr_set_ch
EDDF                  isr_set_ch4
EDDF  8604                    lda #4
EDE1  2000                    bra isr_set_ch
                      
EDE3                  isr_set_ch
EDE3  8B30                    adda #48
EDE5  AD9FF80A                jsr [outch]
EDE9  7A4048                  dec seq_num_spaces
                      
EDEC  20A9                    bra isr_write_ch
                      
EDEE                  isr_do_clear
                              ; b contains current channel, clear that channel
                              ; Print command executed
EDEE  8643                    lda #'C'
EDF0  AD9FF80A                jsr [outch]
EDF4  7A4048                  dec seq_num_spaces
                      
EDF7  5A                      decb
EDF8  3430                    pshs x,y
EDFA  BDEA4E                  jsr clear_channel
EDFD  3530                    puls x,y
EDFF  20B1                    bra isr_end
                      
                      ; =========================
                      ; Data Section
                      ; =========================
EE01  2A2A2A53575450432053657175656E6365722A2A2A0D0A banner  fcc "***SWTPC Sequencer***\r\n"
EE18  04                      fcb $04
EE19                  controls
EE19  4D3A20506C6179202D204E3A205265636F7264202D205A3A2053746F70202D20433A20436C656172204368202D20583A2054656D706F         fcc "M: Play - N: Record - Z: Stop - C: Clear Ch - X: Tempo"
EE4F  04                      fcb $04
EE50                  controls2
EE50  423A2044697265637420506C61796261636B202D20563A204D616E75616C20456E747279         fcc "B: Direct Playback - V: Manual Entry"
EE74  04                      fcb $04
EE75                  version
EE75  0D0A417574686F723A526F6265727420506166666F726420323032312D323032330D0A4275696C643A         fcc "\r\nAuthor:Robert Pafford 2021-2023\r\nBuild:"
EE9E  33362D4F4646            fcc BUILD_ID
EEA4  0D0A                    fcb "\r\n"
EEA6  04                      fcb $04
EEA7                  playback_msg
EEA7  506C61796261636B         fcc "Playback"
EEAF  04                      fcb $04
EEB0                  record_msg
EEB0  3A526563                fcc ":Rec"
EEB4  04                      fcb $04
EEB5                  manual_msg
EEB5  3A4D616E75              fcc ":Manu"
EEBA  04                      fcb $04
EEBB                  channel_prompt_msg
EEBB  43683F20                fcc "Ch? "
EEBF  04                      fcb $04
EEC0                  tempo_prompt_msg
EEC0  456E7465722054656D706F2028656E74657220746F20656E642C206F7468657220746F2061626F7274293A20         fcc "Enter Tempo (enter to end, other to abort): "
EEEC  04                      fcb $04
EEED                  clear_prompt_msg
EEED  456E746572204368616E6E656C20746F20436C6561722028413A20616C6C2C206F7468657220746F2061626F7274293A20         fcc "Enter Channel to Clear (A: all, other to abort): "
EF1E  04                      fcb $04
EF1F                  realtime_ch_prompt_msg
EF1F  456E746572204368616E6E656C20746F20506C617920286F7468657220746F2061626F7274293A20         fcc "Enter Channel to Play (other to abort): "
EF47  04                      fcb $04
EF48                  realtime_entry_msg
EF48  0D0A5072657373204B65797320746F20506C61792E2E2E20284320746F206368616E6765206368616E6E656C2C205A20746F2061626F7274290D0A         fcc "\r\nPress Keys to Play... (C to change channel, Z to abort)\r\n"
EF83  04                      fcb $04
EF84                  tempo_set_msg
EF84  202D2054656D706F20536574         fcc " - Tempo Set"
EF90  04                      fcb $04
EF91                  header_table
EF91  EFA1                    fdb header_blank
EF93  EFA6                    fdb header_beat
EF95  EFA1                    fdb header_blank
EF97  EFAB                    fdb header_ch1
EF99  EFB0                    fdb header_ch2
EF9B  EFB5                    fdb header_ch3
EF9D  EFBA                    fdb header_ch4
EF9F  EFA1                    fdb header_blank
                      
EFA1                  header_blank
EFA1  20202020                fcc "    "
EFA5  04                      fcb $04
                      
EFA6                  header_beat
EFA6  42656174                fcc "Beat"
EFAA  04                      fcb $04
                      
EFAB                  header_ch1
EFAB  4C656164                fcc "Lead"
EFAF  04                      fcb $04
                      
EFB0                  header_ch2
EFB0  42617373                fcc "Bass"
EFB4  04                      fcb $04
                      
EFB5                  header_ch3
EFB5  43687264                fcc "Chrd"
EFB9  04                      fcb $04
                      
EFBA                  header_ch4
EFBA  4472756D                fcc "Drum"
EFBE  04                      fcb $04
EFBF                  oct_change_rp
EFBF  204F63740D0A            fcc " Oct\r\n"
EFC5  04                      fcb $04
EFC6                  keyboard_sequence
EFC6  41575345444654475948554A4B4F4C503B27         fcc "AWSEDFTGYHUJKOLP;'"
EFD8  04                      fcb $04
EFD9                  keyboard_seq_offset
                              ; Keyboard sequence address offset in big endian
                              ; This needs to have 2 subtracted so when the address is subtracted it reports the right number
                              ; Since it starts at C, and A is the base for CV conversion, it needs to shift it by 3 half-steps, minus one because of post-indexing in the loop
EFD9  EFC4                    fdb (keyboard_sequence-2)
