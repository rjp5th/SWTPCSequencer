                      ; Basic sequencer program
                      ; Can be jumped into at entry address
                      ; Expects stack to be set up
                      
                      ; =========================
                      ; Monitor Function Addresses
                      ; =========================
F804                  inch    equ $F804
F806                  inche   equ $F806
F808                  inchek  equ $F808
F80A                  outch   equ $F80A
F80C                  pdata   equ $F80C
F80E                  pcrlf   equ $F80E
                      
                      ; =========================
                      ; Sequencer Addresses
                      ; =========================
E020                  seq_io_base equ $E020
                      
4000                  seq_data_base equ $4000         ; The base of channel data (4 0x10-length byte arrays for each channel)
4040                  seq_tempo equ $4040             ; The tempo value
4042                  seq_record equ $4042            ; The address in the data of the track being recorded
4044                  seq_temp_tempo equ $4044        ; The temporary tempo storing the values as a tempo is being entered
4046                  seq_record_ch equ $4046         ; The channel to record sequences to
                                                      ; Note: this variable can take on special values to control the flow of the main playback logic
                                                      ; 0: Not recording, and doing standard playback
                                                      ; 0xFF: Playback stopped, should return to main menu
                                                      ; 0xFE: Playback paused, pending channel input from user to specify which channel to record to
4047                  seq_cur_beat equ $4047          ; The current beat being played
4048                  seq_num_spaces equ $4048        ; The number of spaces to print between markings, allows printing extra info in ISR without breaking spacing
4049                  seq_in_delay equ $4049          ; If the sequence is currently in the delay loop, if not the isr should not do anything (can sometimes miss keypresses, but the alternative is a race condition)
4050                  seq_timer_fired equ $4050
4051                  realtime_temp_data equ $4051    ; Address holding temporary data to be played on during realtime playback
4052                  current_octave equ $4052        ; The current octave value to add to keyboard input
4053                  octave_printed equ $4053        ; Set if the current octave has been printed for drawing routines
4054                  get_beat_temp equ $4054         ; Temporary value for get beat when performing addition calculations
                      
                      
                      ; =========================
                      ; Serial Addresses/Config
                      ; =========================
E004                  serial_io_address equ $E004
0011                  serial_base_config equ $11
DFC6                  firq_jump_address equ $dfc6
E008                  timer_io_address equ $E008
                      
                      ; =========================
                      ; Entry
                      ; =========================
E800                          org $E800
                      
                              ;fcb 0x10
                              ;fcb 0x4a
                      
                              ; Print banner
E800  AD9FF80E                jsr [pcrlf]
                      
E804  861E                    lda #30
E806  BDEC1B                  jsr printspaces
E809  8EED76                  ldx #banner
E80C  AD9FF80C                jsr [pdata]
                      
                              ; Print Controls
E810  860D                    lda #13
E812  BDEC1B                  jsr printspaces
E815  8EED8E                  ldx #controls
E818  AD9FF80C                jsr [pdata]
E81C  AD9FF80E                jsr [pcrlf]
E820  8616                    lda #22
E822  BDEC1B                  jsr printspaces
E825  8EEDC5                  ldx #controls2
E828  AD9FF80C                jsr [pdata]
                      
                              ; Set default tempo
E82C  CC0014                  ldd #20
E82F  FD4040                  std seq_tempo
                      
                              ; Set default ocatve
E832  8667                    lda #103
E834  B74052                  sta current_octave
                      
E837  BDEB25          redraw  jsr drawscreen
E83A  AD9FF808        poll    jsr [inchek]
E83E  26FA                    bne poll
                      
E840  AD9FF804                jsr [inch]
E844  8166                    cmpa #'f'
E846  2738                    beq crashme
E848  8170                    cmpa #'p'
E84A  2716                    beq do_playback
E84C  8172                    cmpa #'r'
E84E  2717                    beq do_record
E850  8174                    cmpa #'t'
E852  2718                    beq do_tempo
E854  8163                    cmpa #'c'
E856  2719                    beq do_clear
E858  8164                    cmpa #'d'
E85A  271A                    beq do_realtime_playback
E85C  816D                    cmpa #'m'
E85E  271B                    beq do_manual_entry
                      
E860  20D8                    bra poll
E862                  do_playback
E862  BDEA75                  jsr playback
E865  20D0                    bra redraw
E867                  do_record
E867  BDEA34                  jsr record
E86A  20CB                    bra redraw
E86C                  do_tempo
E86C  BDE9B2                  jsr tempo
E86F  20C6                    bra redraw
E871                  do_clear
E871  BDEA02                  jsr clear
E874  20C1                    bra redraw
E876                  do_realtime_playback
E876  BDE933                  jsr realtime_playback
E879  20BC                    bra redraw
E87B                  do_manual_entry
E87B  BDE892                  jsr manual_entry
E87E  20B7                    bra redraw
E880                  crashme
E880  8EE889                  ldx #cm_msg
E883  AD9FF80C                jsr [pdata]
E887                  crashmenow
E887  10                      fcb $10
E888  45                      fcb $45
E889  4D616E4372617368 cm_msg  fcc "ManCrash"
E891  04                      fcb $4
                      
                      ; =========================
                      ; Manual Entry subroutine
                      ; =========================
E892                  manual_entry
                              ; Prompt for channel
E892  8EEDFE                  ldx #channel_prompt_msg
E895  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
E899  AD9FF808        me_wfch jsr [inchek]
E89D  27FA                    beq me_wfch
E89F  AD9FF804                jsr [inch]
E8A3  8173                    cmpa #'s'
E8A5  10270080                lbeq me_done
E8A9  8131                    cmpa #'1'
E8AB  2DEC                    blt me_wfch
E8AD  8134                    cmpa #'4'
E8AF  2EE8                    bgt me_wfch
                              
                              ; Echo channel select
E8B1  1F89                    tfr a,b
E8B3  AD9FF80A                jsr [outch]
                      
                              ; Store channel
E8B7  C030                    subb #48
E8B9  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address (stored in x)
E8BC  5A                      decb
E8BD  8610                    lda #0x10
E8BF  3D                      mul
E8C0  8E4000                  ldx #seq_data_base
E8C3  3A                      abx
                      
E8C4  3410                    pshs x
                              ; Print manual message
E8C6  8EEDF8                  ldx #manual_msg
E8C9  AD9FF80C                jsr [pdata]
E8CD  8605                    lda #5
E8CF  BDEC1B                  jsr printspaces
E8D2  3510                    puls x
                      
E8D4  867C                    lda #'|'
E8D6  AD9FF80A                jsr [outch]
                      
E8DA  108E4047                ldy #seq_cur_beat
E8DE  6FA4                    clr ,y
E8E0  AD9FF808        me_loop jsr [inchek]
E8E4  26FA                    bne me_loop
E8E6  AD9FF804                jsr [inch]
                      
                              ; Check for stop
E8EA  8173                    cmpa #'s'
E8EC  273B                    beq me_done
                      
                              ; Do input processing
E8EE  F64046                  ldb seq_record_ch
E8F1  BDEC6E                  jsr get_beat
E8F4  26EA                    bne me_loop
                      
                              ; Play Beat
E8F6  A6A4                    lda ,y
E8F8  BDEC4F                  jsr play_beat
                      
                              ; ===Print tick===
E8FB  8602                    lda #2
E8FD  7D4053                  tst octave_printed
E900  2704                    beq me_printspace
E902  7F4053                  clr octave_printed
E905  4A                      deca
E906                  me_printspace
E906  BDEC1B                  jsr printspaces
                              
E909  E680                    ldb ,x+
E90B  862E                    lda #46
E90D  5D                      tstb
E90E  2702                    beq me_drawch
E910  8BFC                    adda #-4
E912                  me_drawch
E912  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
E916  A6A4                    lda ,y
E918  4C                      inca
E919  A7A4                    sta ,y
E91B  8110                    cmpa #16
E91D  2DC1                    blt me_loop
                      
                              ; If at end of line, print line terminator and quit
E91F  867C                    lda #'|'
E921  AD9FF80A                jsr [outch]
E925  AD9FF80E                jsr [pcrlf]
                      
E929                  me_done ; Stop any notes being played
E929  8EE020                  ldx #seq_io_base
E92C  4F                      clra
E92D  5F                      clrb
E92E  ED84                    std ,x
E930  ED02                    std 2,x
                      
E932  39                      rts
                      
                      
                      ; =========================
                      ; Realtime Playback subroutine
                      ; =========================
E933                  realtime_playback
                              ; Clear any pending played notes (when called internally)
E933  8EE020                  ldx #seq_io_base
E936  4F                      clra
E937  5F                      clrb
E938  ED84                    std ,x
E93A  ED02                    std 2,x
                      
E93C  8EEE56                  ldx #realtime_ch_prompt_msg
E93F  AD9FF80C                jsr [pdata]
                      
E943  AD9FF808        rp_wfch jsr [inchek]
E947  27FA                    beq rp_wfch
E949  AD9FF804                jsr [inch]
E94D  8131                    cmpa #'1'
E94F  2D57                    blt rp_done
E951  8134                    cmpa #'4'
E953  2E53                    bgt rp_done
                      
                              ; Echo selected channel to console, and give prompt to play data
E955  3402                    pshs a
E957  AD9FF80A                jsr [outch]
E95B  8EEE7F                  ldx #realtime_entry_msg
E95E  AD9FF80C                jsr [pdata]
E962  3504                    puls b
                      
                              ; Load the address to write channel data to
E964  C030                    subb #48
E966  F74046                  stb seq_record_ch
E969  5A                      decb
E96A  8EE020                  ldx #seq_io_base
E96D  3A                      abx
                      
                              ; Make y the actual io address,
                              ; And x will be the temporary realtime data
                              ; Required for drum data or-ing
E96E  1F12                    tfr x,y
E970  8E4051                  ldx #realtime_temp_data
                      
                              ; Get input from user
E973  7D4053          rp_play tst octave_printed
E976  270E                    beq rp_inc
E978  7F4053                  clr octave_printed
E97B  3410                    pshs x
E97D  8EEEF6                  ldx #oct_change_rp
E980  AD9FF80C                jsr [pdata]
E984  3510                    puls x
                      
E986  AD9FF808        rp_inc  jsr [inchek]
E98A  27E7                    beq rp_play
E98C  AD9FF804                jsr [inch]
E990  8163                    cmpa #'c'
E992  279F                    beq realtime_playback
E994  817A                    cmpa #'z'
E996  2710                    beq rp_done
                      
                              ; Do processing on input data
E998  F64046                  ldb seq_record_ch
E99B  6F84                    clr ,x
E99D  BDEC6E                  jsr get_beat
E9A0  26D1                    bne rp_play
                      
                              ; Store temporary register into actual memory
E9A2  A684                    lda ,x
E9A4  A7A4                    sta ,y
                      
E9A6  20CB                    bra rp_play
                      
E9A8                  rp_done ; Stop any pending playback
E9A8  8EE020                  ldx #seq_io_base
E9AB  4F                      clra
E9AC  5F                      clrb
E9AD  ED84                    std ,x
E9AF  ED02                    std 2,x
                      
E9B1  39                      rts
                      
                      ; =========================
                      ; Tempo subroutine
                      ; =========================
E9B2                  tempo
E9B2  8EEE03                  ldx #tempo_prompt_msg
E9B5  AD9FF80C                jsr [pdata]
                      
                              ; Clear temporary tempo
E9B9  CC0000                  ldd #0
E9BC  FD4044                  std seq_temp_tempo
                      
E9BF  AD9FF808        t_waitc jsr [inchek]
E9C3  27FA                    beq t_waitc
E9C5  AD9FF806                jsr [inche]
E9C9  812E                    cmpa #'.'
E9CB  2723                    beq t_write
E9CD  8130                    cmpa #'0'
E9CF  2D2C                    blt t_done
E9D1  8139                    cmpa #'9'
E9D3  2E28                    bgt t_done
                      
                              ; Convert char to number
E9D5  8030                    suba #48
E9D7  3402                    pshs a
                      
                              ; Multiply existing temporary tempo by 10 and add entered number
E9D9  108E4044                ldy #seq_temp_tempo
E9DD  E621                    ldb 1,y
E9DF  860A                    lda #10
E9E1  3D                      mul
E9E2  1F01                    tfr d,x
E9E4  3504                    puls b
E9E6  3A                      abx
E9E7  AFA4                    stx ,y
                      
                              ; If the number is too big to fit into b before multiplication, write it (gives range of 2559)
E9E9  8C00FF                  cmpx #255
E9EC  2E02                    bgt t_write
                      
E9EE  20CF                    bra t_waitc
E9F0  FC4044          t_write ldd seq_temp_tempo
E9F3  FD4040                  std seq_tempo
                      
E9F6  8EEEBB                  ldx #tempo_set_msg
E9F9  AD9FF80C                jsr [pdata]
E9FD  AD9FF80E        t_done  jsr [pcrlf]
EA01  39                      rts
                      
                      ; =========================
                      ; Clear subroutine
                      ; =========================
EA02                  clear
                              ; Prompt for channel
EA02  8EEE2C                  ldx #clear_prompt_msg
EA05  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to clear
EA09  AD9FF808        cl_wfch jsr [inchek]
EA0D  27FA                    beq cl_wfch
EA0F  AD9FF804                jsr [inch]
EA13  8131                    cmpa #'1'
EA15  2D1B                    blt cl_done
EA17  8134                    cmpa #'4'
EA19  2E17                    bgt cl_done
                      
                              ; Echo channel select
EA1B  1F89                    tfr a,b
EA1D  AD9FF80A                jsr [outch]
                      
                              ; Calculate address of sequence data
EA21  C031                    subb #49
EA23  8610                    lda #0x10
EA25  3D                      mul
EA26  8E4000                  ldx #seq_data_base
EA29  3A                      abx
                              
                              ; Clear the channel of existing data
EA2A  C610                    ldb #0x10
EA2C  4F                      clra
EA2D  A780            cl_loop sta ,x+
EA2F  5A                      decb
EA30  26FB                    bne cl_loop
EA32  39              cl_done rts
                      
                      ; =========================
                      ; Record subroutine
                      ; =========================
EA33  39              rc_quit rts
EA34                  record
                              ; Prompt for channel
EA34  8EEDFE                  ldx #channel_prompt_msg
EA37  AD9FF80C                jsr [pdata]
                      
                              ; Get channel to record
EA3B  AD9FF808        rc_wfch jsr [inchek]
EA3F  27FA                    beq rc_wfch
EA41  AD9FF804                jsr [inch]
EA45  8173                    cmpa #'s'
EA47  27EA                    beq rc_quit
EA49  8131                    cmpa #'1'
EA4B  2DEE                    blt rc_wfch
EA4D  8134                    cmpa #'4'
EA4F  2EEA                    bgt rc_wfch
                              
                              ; Echo channel select
EA51  1F89                    tfr a,b
EA53  AD9FF80A                jsr [outch]
                              
                              ; Store selected channel
EA57  C030                    subb #48  ; Convert '1'-'4' to 1-4
EA59  F74046                  stb seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
EA5C  5A                      decb
EA5D  8610                    lda #0x10
EA5F  3D                      mul
EA60  8E4000                  ldx #seq_data_base
EA63  3A                      abx
EA64  BF4042                  stx seq_record
                      
                              ; Print record message
EA67  8EEDF3                  ldx #record_msg
EA6A  AD9FF80C                jsr [pdata]
EA6E  8606                    lda #6
EA70  BDEC1B                  jsr printspaces
                      
EA73  200F                    bra pb_common
                      
                      
                      ; =========================
                      ; Playback subroutine
                      ; =========================
EA75                  playback
                              ; Print playback symbol
EA75  8EEDEA                  ldx #playback_msg
EA78  AD9FF80C                jsr [pdata]
EA7C  8607                    lda #7
EA7E  BDEC1B                  jsr printspaces
                      
EA81  7F4046                  clr seq_record_ch       ; Set playback channel to 0 (No recording)
EA84                  pb_common       
                              ; Enable interrupts for serial input, allowing processing during playback
EA84  7F4049                  clr seq_in_delay        ; Make sure the interrupts don't mess with anything before it is in the delay
EA87  BEDFC6                  ldx firq_jump_address
EA8A  3411                    pshs cc,x               ; Save the cc register and the previous irq data, so if firqs are already enabled then they will remain enabled after the function exits
EA8C  8EECE3                  ldx #playback_isr
EA8F  BFDFC6                  stx firq_jump_address   ; Set the new irq function
EA92  8680                    lda #0x80               ; Enable serial irqs
EA94  BDECDD                  jsr serial_set_interrupt
EA97  8601                    lda #1                  ; Enable timer irqs
EA99  B7E008                  sta timer_io_address
EA9C  1CBF                    andcc #0xBF             ; Enable FIRQ
EA9E  7F4050                  clr seq_timer_fired             ; Clear pending timer interrupts
                      
                              ; Set the default number of spaces to print between marks
EAA1  8602                    lda #2
EAA3  B74048                  sta seq_num_spaces
                      
EAA6  867C            pb_run  lda #'|'
EAA8  AD9FF80A                jsr [outch]
                              
EAAC  7F4047                  clr seq_cur_beat        ; Set the currently played beat to 0
                              
EAAF                  pb_loop 
                              ; Delay
EAAF  7C4049                  inc seq_in_delay        ; Note this is under the assumption that pb_loop is always jumped to with seq_in_delay cleared
EAB2  BDEC32                  jsr delay_tempo
                      
                              ; Check if input is pending for changing record channel
EAB5  B64046          pb_wait lda seq_record_ch
EAB8  81FE                    cmpa #0xFE
EABA  27F9                    beq pb_wait
                              
EABC  7F4049                  clr seq_in_delay
                      
                              ; Check if during delay an interrupt fired which stopped playback
EABF  B64046                  lda seq_record_ch
EAC2  81FF                    cmpa #0xFF
EAC4  2749                    beq pb_done
                      
                              ; Play Beat
EAC6  B64047                  lda seq_cur_beat
EAC9  BDEC4F                  jsr play_beat
                      
                              ; ===Print tick===
                      
                              ; Print number of spaces required, then reset the value
EACC  B64048                  lda seq_num_spaces
EACF  BDEC1B                  jsr printspaces
EAD2  8602                    lda #2
EAD4  B74048                  sta seq_num_spaces
                              
                              ; Tick will be different for playback vs recording
EAD7  B64046                  lda seq_record_ch
EADA  2604                    bne pb_rec
                              
                              ; Character to display during playback
EADC  862E                    lda #'.'
EADE  200F                    bra pb_drawch
                              
EAE0                  pb_rec  ; This code will run when it is recording
EAE0  BE4042                  ldx seq_record
EAE3  B64047                  lda seq_cur_beat
EAE6  E686                    ldb a,x
                              
EAE8  862E                    lda #46
EAEA  5D                      tstb
EAEB  2702                    beq pb_drawch
EAED  8BFC                    adda #-4
EAEF                  pb_drawch
EAEF  AD9FF80A                jsr [outch]
                      
                              ; Increment beat counter
EAF3  B64047                  lda seq_cur_beat
EAF6  4C                      inca
EAF7  B74047                  sta seq_cur_beat
EAFA  8110                    cmpa #16
EAFC  2DB1                    blt pb_loop
                      
                              ; If at end of line, start a new one
EAFE  867C                    lda #'|'
EB00  AD9FF80A                jsr [outch]
EB04  AD9FF80E                jsr [pcrlf]
EB08  860F                    lda #15
EB0A  BDEC1B                  jsr printspaces
EB0D  2097                    bra pb_run
                      
EB0F                  pb_done ; Stop serial interrupts
EB0F  3511                    puls cc,x
EB11  BFDFC6                  stx firq_jump_address
EB14  4F                      clra
EB15  BDECDD                  jsr serial_set_interrupt
EB18  7FE008                  clr timer_io_address
                      
                              ; Stop any notes being played
EB1B  8EE020                  ldx #seq_io_base
EB1E  4F                      clra
EB1F  5F                      clrb
EB20  ED84                    std ,x
EB22  ED02                    std 2,x
                      
EB24  39                      rts
                      
                      
                      ; =========================
                      ; Draw Screen subroutine
                      ; =========================
                      ; Draws the screen displaying the sequence
EB25                  drawscreen
EB25  AD9FF80E                jsr [pcrlf]
EB29  5F                      clrb
EB2A  3404                    pshs b
                              
EB2C                  ds_drawrow
                              ; Print out the pre-padding
EB2C  860A                    lda #10 ; Pre-padding without channel id
                      
                              ; Channel headers get lower spacing for channel id prefix
EB2E  C103                    cmpb #3
EB30  2D06                    blt ds_pleadspaces
EB32  C107                    cmpb #7
EB34  2C02                    bge ds_pleadspaces
EB36  8607                    lda #7 ; Pre-padding with channel id
EB38                  ds_pleadspaces
EB38  BDEC1B                  jsr printspaces
                      
EB3B  C103                    cmpb #3
EB3D  2D18                    blt ds_printheader
EB3F  C107                    cmpb #7
EB41  2C14                    bge ds_printheader
EB43  1F98                    tfr b,a
EB45  8B2E                    adda #46
EB47  AD9FF80A                jsr [outch]
EB4B  863A                    lda #':'
EB4D  AD9FF80A                jsr [outch]
EB51  8620                    lda #32
EB53  AD9FF80A                jsr [outch]
                      
EB57                  ds_printheader
                              ; Print row title
EB57  58                      lslb
EB58  8EEEC8                  ldx #header_table
EB5B  3A                      abx
EB5C  AE84                    ldx ,x
EB5E  AD9FF80C                jsr [pdata]
                      
                              ; Print space
EB62  8620                    lda #32
EB64  AD9FF80A                jsr [outch]
                      
                              ; Print table right border
EB68  C600                    ldb #0
EB6A                  ds_draw_border
EB6A  3502                    puls a
EB6C  3402                    pshs a
EB6E  8100                    cmpa #0
EB70  2702                    beq ds_fr_c
EB72  861D                    lda #0x1D  ; If A is not the first row, set to '|' (0x7C), else set to 0x5C
EB74  8B5F            ds_fr_c adda #0x5F
EB76  AD9FF80A                jsr [outch]
EB7A  C101                    cmpb #1
EB7C  1027008A                lbeq ds_loop
                      
                              ; Print contents of table
EB80  3502                    puls a
EB82  3402                    pshs a
EB84  8100                    cmpa #0
EB86  273F                    beq ds_top_row
EB88  8101                    cmpa #1
EB8A  2750                    beq ds_beats_row
EB8C  8102                    cmpa #2
EB8E  2733                    beq ds_mid_row
EB90  8107                    cmpa #7
EB92  272F                    beq ds_mid_row
                      
                              ; Else channel row
                              ; Load base address of sequence
EB94  3502                    puls a
EB96  3402                    pshs a
EB98  8003                    suba #3
EB9A  C610                    ldb #0x10
EB9C  3D                      mul
EB9D  8E4000                  ldx #seq_data_base
EBA0  3A                      abx
                              
EBA1  4F                      clra
EBA2  3402                    pshs a
EBA4                  ds_draw_channel_beat
EBA4  8602                    lda #2
EBA6  BDEC1B                  jsr printspaces
EBA9  E680                    ldb ,x+
EBAB  8620                    lda #32
EBAD  5D                      tstb
EBAE  2702                    beq ds_print_channel_val
EBB0  8B0A                    adda #10
EBB2                  ds_print_channel_val
EBB2  AD9FF80A                jsr [outch]
                      
EBB6  3502                    puls a
EBB8  4C                      inca
EBB9  3402                    pshs a
EBBB  8110                    cmpa #16
                      
EBBD  26E5                    bne ds_draw_channel_beat
EBBF  3502                    puls a
                      
EBC1  2042                    bra ds_border_close
                      
                      
EBC3                  ds_mid_row
EBC3  862D                    lda #'-'
EBC5  2002                    bra ds_draw_row
EBC7                  ds_top_row
EBC7  865F                    lda #'_'
EBC9                  ds_draw_row
EBC9  3402                    pshs a
EBCB  C630                    ldb #0x30       ; Row Width: 48
EBCD  3502            ds_dr_l puls a          ; Print variable on stack b times
EBCF  3402                    pshs a
EBD1  AD9FF80A                jsr [outch]
EBD5  5A                      decb
EBD6  26F5                    bne ds_dr_l
EBD8  3502                    puls a
EBDA  2029                    bra ds_border_close
                      
EBDC                  ds_beats_row
EBDC  C601                    ldb #1
                      
EBDE                  ds_print_beat
                              ; Print space
EBDE  8620                    lda #32
EBE0  AD9FF80A                jsr [outch]
                      
                              ; Print tens digit, or space
EBE4  8620                    lda #32
EBE6  C10A                    cmpb #10
EBE8  2D02                    blt ds_beat_print_tens
EBEA  8631                    lda #'1'
EBEC                  ds_beat_print_tens
EBEC  AD9FF80A                jsr [outch]
                      
                              ; Print ones digit
EBF0  1F98                    tfr b,a
EBF2  C10A                    cmpb #10
EBF4  2D02                    blt ds_beat_skip_subtract
EBF6  800A                    suba #10
EBF8                  ds_beat_skip_subtract
EBF8  8B30                    adda #48
EBFA  AD9FF80A                jsr [outch]
                      
EBFE  5C                      incb
EBFF  C110                    cmpb #16
EC01  2FDB                    ble ds_print_beat
                      
EC03  2000                    bra ds_border_close
                      
                      
                              ; Print table border
EC05                  ds_border_close
EC05  C601                    ldb #1
EC07  16FF60                  lbra ds_draw_border
EC0A                  ds_loop
EC0A  AD9FF80E                jsr [pcrlf]
EC0E  3504                    puls b
EC10  5C                      incb
                      
EC11  C108                    cmpb #8
EC13  2705                    beq ds_done
                              
EC15  3404                    pshs b
EC17  16FF12                  lbra ds_drawrow
                      
EC1A  39              ds_done rts
                      
                      ; =========================
                      ; Print Spaces Subroutine
                      ; =========================
                      ; Prints number of spaces in A register
EC1B                  printspaces
EC1B  3404                    pshs b
EC1D  1F89                    tfr a,b
EC1F  5D              ps_loop tstb
EC20  270D                    beq ps_done
EC22  3404                    pshs b
EC24  8620                    lda #32  ; Load with space
EC26  AD9FF80A                jsr [outch]
EC2A  3504                    puls b
EC2C  5A                      decb
EC2D  20F0                    bra ps_loop
EC2F  3504            ps_done puls b
EC31  39                      rts
                      
                      ; =========================
                      ; Delay Subroutine
                      ; =========================
EC32                  delay_tempo
EC32  3410                    pshs x
EC34  8E0000                  ldx #0
EC37  C601                    ldb #1
EC39  7D4050                  tst seq_timer_fired
EC3C  2605                    bne d_nowait
EC3E  7D4050          d_wait  tst seq_timer_fired
EC41  27FB                    beq d_wait
EC43                  d_nowait
EC43  7F4050                  clr seq_timer_fired
EC46  3A                      abx
EC47  BC4040                  cmpx seq_tempo
EC4A  26F2                    bne d_wait
                      
EC4C  3510                    puls x
EC4E  39                      rts
                      
                      ; =========================
                      ; Play Beat Subroutine
                      ; =========================
                      ; The a register should contain the offset
                      ; The b,x,y register is saved
EC4F                  play_beat
EC4F  3434                    pshs x,y,b
                      
                              ; Setup initial address
EC51  8E4000                  ldx #seq_data_base
EC54  1F89                    tfr a,b
EC56  3A                      abx
EC57  108EE020                ldy #seq_io_base
                      
                              ; Set channel count to transfer
EC5B  C604                    ldb #4
                              
                              ; Write each channel's value for the given beat
EC5D  3404            p_b_wch pshs b
EC5F  A684                    lda ,x
EC61  A7A0                    sta ,y+
EC63  C610                    ldb #16
EC65  3A                      abx
EC66  3504                    puls b
EC68  5A                      decb
EC69  26F2                    bne p_b_wch
                      
EC6B  3534                    puls x,y,b
EC6D  39                      rts
                      
                      ; =========================
                      ; Get Beat Subroutine
                      ; =========================
                      ; a is the beat to get
                      ; b is the channel to record to (used in decoding logic)
                      ; x is the address to store data in
                      ; Saves y,x
                      ; Returns: cc.z = 0 on no data written, cc.z = 1 on data written
EC6E                  get_beat
EC6E  3420                    pshs y
EC70  812E                    cmpa #'.'
EC72  275F                    beq gb_clrv
EC74  8120                    cmpa #32
EC76  2760                    beq gb_done
EC78  C104                    cmpb #4         ; If on drum channel, do different decoding
EC7A  2741                    beq gb_drum
                      
                              ; Check for octave lookup
EC7C  8131                    cmpa #'1'
EC7E  2D19                    blt gb_decode_key_seq
EC80  8134                    cmpa #'4'
EC82  2E15                    bgt gb_decode_key_seq
                              ; Set octave
                              
                              ; Print octave
EC84  AD9FF80A                jsr [outch]
EC88  C601                    ldb #1
EC8A  F74053                  stb octave_printed
                      
EC8D  8031                    suba #49        ; Convert octave to value 0-3
                      
                              ; Do octave conversion math
EC8F  C633                    ldb #51
EC91  3D                      mul
EC92  5C                      incb
EC93  F74052                  stb current_octave
                      
EC96  4F                      clra
EC97  203F                    bra gb_done
                      
EC99                  gb_decode_key_seq
                              ; Try lookup key
                      
                              ; Load y with the keyboard_seq lookup string
                              ; Search through y until either character is found or $04 is reached
EC99  108EEEFD                ldy #keyboard_sequence
                              ; b register contains value at end of index string (when search is finished)
EC9D  C604                    ldb #4
EC9F                  gb_lookup_key_loop
EC9F  E1A4                    cmpb ,y
ECA1  2735                    beq gb_done
ECA3  A1A0                    cmpa ,y+
ECA5  26F8                    bne gb_lookup_key_loop
                              
ECA7  1F20                    tfr y,d
ECA9  B3EF10                  subd keyboard_seq_offset
                      
                              ; b now contains the # of half-steps up from A
ECAC  1F98                    tfr b,a
                              ; Divide by 4
ECAE  44                      lsra
ECAF  44                      lsra
ECB0  B74054                  sta get_beat_temp
                      
                              ; Also multiply by 4
ECB3  58                      lslb
ECB4  58                      lslb
                              ; Add the val/4 + val*4
ECB5  FB4054                  addb get_beat_temp
                              ; Add octave offset
ECB8  FB4052                  addb current_octave
                      
ECBB  2017                    bra gb_write
                      
ECBD                  gb_drum ; Decode Drum Data
ECBD  8131                    cmpa #'1'
ECBF  2D17                    blt gb_done
ECC1  8138                    cmpa #'8'
ECC3  2E13                    bgt gb_done
                      
                              ; a is now loaded with a character between 1 and 8
                              ; Convert entered character to value
ECC5  8030                    suba #48
ECC7  C601                    ldb #1
ECC9  4A              gb_conv deca
ECCA  2703                    beq gb_or_data
ECCC  58                      lslb
ECCD  20FA                    bra gb_conv
ECCF                  gb_or_data
ECCF  EA84                    orb ,x
ECD1  2001                    bra gb_write
                      
ECD3                  gb_clrv ; Create a value to clear when writing to memory
ECD3  5F                      clrb
ECD4                  gb_write
                              ; Write the calculated value to the sequencer memory
ECD4  E784                    stb ,x
                      
                              ; Dirty hack to make it return success on either space or successful decoding
ECD6  8620                    lda #32
ECD8  3520            gb_done puls y
ECDA  8120                    cmpa #32
ECDC  39                      rts
                      
                      ; =========================
                      ; Serial Interrupt Routines
                      ; =========================
                      ; a register: 0x80 for enable interrupts, 0 for disable
ECDD                  serial_set_interrupt
ECDD  8B11                    adda #serial_base_config
ECDF  B7E004                  sta serial_io_address
ECE2  39                      rts
                      
ECE3                  playback_isr
ECE3  3406                    pshs a,b
                      
ECE5  AD9FF808                jsr [inchek]            ; Check if interrupt is from key press
ECE9  2613                    bne isr_key
                      
ECEB  7DE009                  tst timer_io_address+1  ; Check if interrupt is from timer
ECEE  2603                    bne isr_timer
                      
ECF0  160080                  lbra isr_end            ; Else ignore
                      
ECF3                  isr_timer
ECF3  7FE009                  clr timer_io_address+1
ECF6  8601                    lda #1
ECF8  B74050                  sta seq_timer_fired
ECFB  160075                  lbra isr_end
                      
ECFE  AD9FF804        isr_key jsr [inch]
                      
                              ; Check if it is okay to do handling of incoming serial data
ED02  F64049                  ldb seq_in_delay
ED05  276C                    beq isr_end
                      
                              ; Process universal keypresses
ED07  8173                    cmpa #'s'
ED09  2745                    beq isr_stop_playback
ED0B  8170                    cmpa #'p'
ED0D  2758                    beq isr_do_playback
ED0F  8172                    cmpa #'r'
ED11  2744                    beq isr_do_record
                      
                              ; Process keypresses depending on recording/playback/expecting channel data
ED13  F64046                  ldb seq_record_ch
ED16  275B                    beq isr_end     ; Nothing special to do during playback, only universal keypresses
ED18  C1FF                    cmpb #0xFF
ED1A  2757                    beq isr_end     ; Don't do anything special if it is stopping
ED1C  C1FE                    cmpb #0xFE
ED1E  2712                    beq isr_sel_ch  ; Do channel selection if it is waiting for a channel
                              
                              ; Everything else is recording and b now contains the channel to record to
ED20  3414                    pshs x,b
ED22  F64047                  ldb seq_cur_beat
ED25  BE4042                  ldx seq_record
ED28  3A                      abx
ED29  3504                    puls b
ED2B  BDEC6E                  jsr get_beat
ED2E  3510                    puls x
                              
ED30  2041                    bra isr_end
                      
ED32                  isr_sel_ch
ED32  8131                    cmpa #'1'
ED34  2D3D                    blt isr_end
ED36  8134                    cmpa #'4'
ED38  2E39                    bgt isr_end
                              
                              ; Store selected channel
ED3A  8030                    suba #48  ; Convert '1'-'4' to 1-4
ED3C  B74046                  sta seq_record_ch
                      
                              ; Make channel range 0-3 to calculate record address
ED3F  3410                    pshs x
ED41  4A                      deca
ED42  C610                    ldb #0x10
ED44  3D                      mul
ED45  8E4000                  ldx #seq_data_base
ED48  3A                      abx
ED49  BF4042                  stx seq_record
ED4C  3510                    puls x
                      
ED4E  2023                    bra isr_end
                      
ED50                  isr_stop_playback
ED50  86FF                    lda #0xFF
ED52  B74046                  sta seq_record_ch
ED55  201C                    bra isr_end
                      
ED57                  isr_do_record
                              ; Print command to display
ED57  8652                    lda #'R'
ED59  AD9FF80A                jsr [outch]
ED5D  7A4048                  dec seq_num_spaces
                      
                              ; Set to wait for pending press to switch recording channel
ED60  86FE                    lda #0xFE
ED62  B74046                  sta seq_record_ch
ED65  200C                    bra isr_end
                      
ED67                  isr_do_playback
                              ; Print command to display
ED67  8650                    lda #'P'
ED69  AD9FF80A                jsr [outch]
ED6D  7A4048                  dec seq_num_spaces
                      
                              ; Set to playback
ED70  7F4046                  clr seq_record_ch
                      
ED73  3506            isr_end puls a,b
ED75  3B                      rti
                      
                      ; =========================
                      ; Data Section
                      ; =========================
ED76  2A2A2A53575450432053657175656E6365722A2A2A0D0A banner  fcc "***SWTPC Sequencer***\r\n"
ED8D  04                      fcb $04
ED8E                  controls
ED8E  503A20506C6179202D20523A205265636F7264202D20533A2053746F70202D20433A20436C656172204368202D20543A2054656D706F         fcc "P: Play - R: Record - S: Stop - C: Clear Ch - T: Tempo"
EDC4  04                      fcb $04
EDC5                  controls2
EDC5  443A2044697265637420506C61796261636B202D204D3A204D616E75616C20456E747279         fcc "D: Direct Playback - M: Manual Entry"
EDE9  04                      fcb $04
EDEA                  playback_msg
EDEA  506C61796261636B         fcc "Playback"
EDF2  04                      fcb $04
EDF3                  record_msg
EDF3  3A526563                fcc ":Rec"
EDF7  04                      fcb $04
EDF8                  manual_msg
EDF8  3A4D616E75              fcc ":Manu"
EDFD  04                      fcb $04
EDFE                  channel_prompt_msg
EDFE  43683F20                fcc "Ch? "
EE02  04                      fcb $04
EE03                  tempo_prompt_msg
EE03  456E7465722054656D706F20282E20746F20656E642C206F7468657220746F2061626F7274293A20         fcc "Enter Tempo (. to end, other to abort): "
EE2B  04                      fcb $04
EE2C                  clear_prompt_msg
EE2C  456E746572204368616E6E656C20746F20436C65617220286F7468657220746F2061626F7274293A20         fcc "Enter Channel to Clear (other to abort): "
EE55  04                      fcb $04
EE56                  realtime_ch_prompt_msg
EE56  456E746572204368616E6E656C20746F20506C617920286F7468657220746F2061626F7274293A20         fcc "Enter Channel to Play (other to abort): "
EE7E  04                      fcb $04
EE7F                  realtime_entry_msg
EE7F  0D0A5072657373204B65797320746F20506C61792E2E2E20286320746F206368616E6765206368616E6E656C2C207A20746F2061626F7274290D0A         fcc "\r\nPress Keys to Play... (c to change channel, z to abort)\r\n"
EEBA  04                      fcb $04
EEBB                  tempo_set_msg
EEBB  202D2054656D706F20536574         fcc " - Tempo Set"
EEC7  04                      fcb $04
EEC8                  header_table
EEC8  EED8                    fdb header_blank
EECA  EEDD                    fdb header_beat
EECC  EED8                    fdb header_blank
EECE  EEE2                    fdb header_ch1
EED0  EEE7                    fdb header_ch2
EED2  EEEC                    fdb header_ch3
EED4  EEF1                    fdb header_ch4
EED6  EED8                    fdb header_blank
                      
EED8                  header_blank
EED8  20202020                fcc "    "
EEDC  04                      fcb $04
                      
EEDD                  header_beat
EEDD  42656174                fcc "Beat"
EEE1  04                      fcb $04
                      
EEE2                  header_ch1
EEE2  4C656164                fcc "Lead"
EEE6  04                      fcb $04
                      
EEE7                  header_ch2
EEE7  42617373                fcc "Bass"
EEEB  04                      fcb $04
                      
EEEC                  header_ch3
EEEC  43687264                fcc "Chrd"
EEF0  04                      fcb $04
                      
EEF1                  header_ch4
EEF1  4472756D                fcc "Drum"
EEF5  04                      fcb $04
EEF6                  oct_change_rp
EEF6  204F63740D0A            fcc " Oct\r\n"
EEFC  04                      fcb $04
EEFD                  keyboard_sequence
EEFD  61777365646674677968756A6B6F6C703B27         fcc "awsedftgyhujkolp;'"
EF0F  04                      fcb $04
EF10                  keyboard_seq_offset
                              ; Keyboard sequence address offset in big endian
                              ; This needs to have 2 subtracted so when the address is subtracted it reports the right number
                              ; Since it starts at C, and A is the base for CV conversion, it needs to shift it by 3 half-steps, minus one because of post-indexing in the loop
EF10  EEFB                    fdb (keyboard_sequence-2)
